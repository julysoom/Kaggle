{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import data processing libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "from collections import OrderedDict\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "# data modeling\n",
    "import xgboost\n",
    "from xgboost import plot_importance\n",
    "import lightgbm as lgb\n",
    "from sklearn.preprocessing import RobustScaler\n",
    "from sklearn.linear_model import ElasticNet, Lasso, BayesianRidge, LassoLarsIC, Ridge\n",
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
    "from sklearn.kernel_ridge import KernelRidge\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.base import BaseEstimator, clone, TransformerMixin, RegressorMixin\n",
    "from sklearn.model_selection import cross_val_score, KFold, train_test_split\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "from sklearn.ensemble import VotingClassifier\n",
    "# data visualization\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "pd.set_option(\"display.max_columns\", None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1460, 81)\n",
      "(1459, 80)\n"
     ]
    }
   ],
   "source": [
    "os.getcwd()\n",
    "os.chdir(\"D:\\Project\\Kaggle\\house\")\n",
    "train = pd.read_csv(\"train.csv\")\n",
    "test = pd.read_csv(\"test.csv\")\n",
    "print(train.shape)\n",
    "print(test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# labeling datasets\n",
    "train[\"Label\"] = \"train\"\n",
    "test[\"Label\"] = \"test\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>LandSlope</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Condition1</th>\n",
       "      <th>Condition2</th>\n",
       "      <th>BldgType</th>\n",
       "      <th>HouseStyle</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>RoofStyle</th>\n",
       "      <th>RoofMatl</th>\n",
       "      <th>Exterior1st</th>\n",
       "      <th>Exterior2nd</th>\n",
       "      <th>MasVnrType</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>ExterQual</th>\n",
       "      <th>ExterCond</th>\n",
       "      <th>Foundation</th>\n",
       "      <th>BsmtQual</th>\n",
       "      <th>BsmtCond</th>\n",
       "      <th>BsmtExposure</th>\n",
       "      <th>BsmtFinType1</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>BsmtFinType2</th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>BsmtUnfSF</th>\n",
       "      <th>TotalBsmtSF</th>\n",
       "      <th>Heating</th>\n",
       "      <th>HeatingQC</th>\n",
       "      <th>CentralAir</th>\n",
       "      <th>Electrical</th>\n",
       "      <th>1stFlrSF</th>\n",
       "      <th>2ndFlrSF</th>\n",
       "      <th>LowQualFinSF</th>\n",
       "      <th>GrLivArea</th>\n",
       "      <th>BsmtFullBath</th>\n",
       "      <th>BsmtHalfBath</th>\n",
       "      <th>FullBath</th>\n",
       "      <th>HalfBath</th>\n",
       "      <th>BedroomAbvGr</th>\n",
       "      <th>KitchenAbvGr</th>\n",
       "      <th>KitchenQual</th>\n",
       "      <th>TotRmsAbvGrd</th>\n",
       "      <th>Functional</th>\n",
       "      <th>Fireplaces</th>\n",
       "      <th>FireplaceQu</th>\n",
       "      <th>GarageType</th>\n",
       "      <th>GarageYrBlt</th>\n",
       "      <th>GarageFinish</th>\n",
       "      <th>GarageCars</th>\n",
       "      <th>GarageArea</th>\n",
       "      <th>GarageQual</th>\n",
       "      <th>GarageCond</th>\n",
       "      <th>PavedDrive</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>CollgCr</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2003</td>\n",
       "      <td>2003</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>BrkFace</td>\n",
       "      <td>196.0</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>PConc</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>No</td>\n",
       "      <td>GLQ</td>\n",
       "      <td>706.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>856.0</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>856</td>\n",
       "      <td>854</td>\n",
       "      <td>0</td>\n",
       "      <td>1710</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>8</td>\n",
       "      <td>Typ</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>2.0</td>\n",
       "      <td>548.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>FR2</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Veenker</td>\n",
       "      <td>Feedr</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>1Story</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>1976</td>\n",
       "      <td>1976</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>MetalSd</td>\n",
       "      <td>MetalSd</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>CBlock</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>Gd</td>\n",
       "      <td>ALQ</td>\n",
       "      <td>978.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0.0</td>\n",
       "      <td>284.0</td>\n",
       "      <td>1262.0</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>1262</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1262</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>6</td>\n",
       "      <td>Typ</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>2.0</td>\n",
       "      <td>460.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>298</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>CollgCr</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2001</td>\n",
       "      <td>2002</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>BrkFace</td>\n",
       "      <td>162.0</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>PConc</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>Mn</td>\n",
       "      <td>GLQ</td>\n",
       "      <td>486.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0.0</td>\n",
       "      <td>434.0</td>\n",
       "      <td>920.0</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>920</td>\n",
       "      <td>866</td>\n",
       "      <td>0</td>\n",
       "      <td>1786</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>6</td>\n",
       "      <td>Typ</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>2.0</td>\n",
       "      <td>608.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Corner</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Crawfor</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>1915</td>\n",
       "      <td>1970</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>Wd Sdng</td>\n",
       "      <td>Wd Shng</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>BrkTil</td>\n",
       "      <td>TA</td>\n",
       "      <td>Gd</td>\n",
       "      <td>No</td>\n",
       "      <td>ALQ</td>\n",
       "      <td>216.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0.0</td>\n",
       "      <td>540.0</td>\n",
       "      <td>756.0</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>961</td>\n",
       "      <td>756</td>\n",
       "      <td>0</td>\n",
       "      <td>1717</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>7</td>\n",
       "      <td>Typ</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Detchd</td>\n",
       "      <td>1998.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>3.0</td>\n",
       "      <td>642.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>272</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>FR2</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>NoRidge</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>BrkFace</td>\n",
       "      <td>350.0</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>PConc</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>Av</td>\n",
       "      <td>GLQ</td>\n",
       "      <td>655.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0.0</td>\n",
       "      <td>490.0</td>\n",
       "      <td>1145.0</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>1145</td>\n",
       "      <td>1053</td>\n",
       "      <td>0</td>\n",
       "      <td>2198</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>9</td>\n",
       "      <td>Typ</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>3.0</td>\n",
       "      <td>836.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>192</td>\n",
       "      <td>84</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n",
       "1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n",
       "2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n",
       "3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n",
       "4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n",
       "\n",
       "  LandContour Utilities LotConfig LandSlope Neighborhood Condition1  \\\n",
       "0         Lvl    AllPub    Inside       Gtl      CollgCr       Norm   \n",
       "1         Lvl    AllPub       FR2       Gtl      Veenker      Feedr   \n",
       "2         Lvl    AllPub    Inside       Gtl      CollgCr       Norm   \n",
       "3         Lvl    AllPub    Corner       Gtl      Crawfor       Norm   \n",
       "4         Lvl    AllPub       FR2       Gtl      NoRidge       Norm   \n",
       "\n",
       "  Condition2 BldgType HouseStyle  OverallQual  OverallCond  YearBuilt  \\\n",
       "0       Norm     1Fam     2Story            7            5       2003   \n",
       "1       Norm     1Fam     1Story            6            8       1976   \n",
       "2       Norm     1Fam     2Story            7            5       2001   \n",
       "3       Norm     1Fam     2Story            7            5       1915   \n",
       "4       Norm     1Fam     2Story            8            5       2000   \n",
       "\n",
       "   YearRemodAdd RoofStyle RoofMatl Exterior1st Exterior2nd MasVnrType  \\\n",
       "0          2003     Gable  CompShg     VinylSd     VinylSd    BrkFace   \n",
       "1          1976     Gable  CompShg     MetalSd     MetalSd       None   \n",
       "2          2002     Gable  CompShg     VinylSd     VinylSd    BrkFace   \n",
       "3          1970     Gable  CompShg     Wd Sdng     Wd Shng       None   \n",
       "4          2000     Gable  CompShg     VinylSd     VinylSd    BrkFace   \n",
       "\n",
       "   MasVnrArea ExterQual ExterCond Foundation BsmtQual BsmtCond BsmtExposure  \\\n",
       "0       196.0        Gd        TA      PConc       Gd       TA           No   \n",
       "1         0.0        TA        TA     CBlock       Gd       TA           Gd   \n",
       "2       162.0        Gd        TA      PConc       Gd       TA           Mn   \n",
       "3         0.0        TA        TA     BrkTil       TA       Gd           No   \n",
       "4       350.0        Gd        TA      PConc       Gd       TA           Av   \n",
       "\n",
       "  BsmtFinType1  BsmtFinSF1 BsmtFinType2  BsmtFinSF2  BsmtUnfSF  TotalBsmtSF  \\\n",
       "0          GLQ       706.0          Unf         0.0      150.0        856.0   \n",
       "1          ALQ       978.0          Unf         0.0      284.0       1262.0   \n",
       "2          GLQ       486.0          Unf         0.0      434.0        920.0   \n",
       "3          ALQ       216.0          Unf         0.0      540.0        756.0   \n",
       "4          GLQ       655.0          Unf         0.0      490.0       1145.0   \n",
       "\n",
       "  Heating HeatingQC CentralAir Electrical  1stFlrSF  2ndFlrSF  LowQualFinSF  \\\n",
       "0    GasA        Ex          Y      SBrkr       856       854             0   \n",
       "1    GasA        Ex          Y      SBrkr      1262         0             0   \n",
       "2    GasA        Ex          Y      SBrkr       920       866             0   \n",
       "3    GasA        Gd          Y      SBrkr       961       756             0   \n",
       "4    GasA        Ex          Y      SBrkr      1145      1053             0   \n",
       "\n",
       "   GrLivArea  BsmtFullBath  BsmtHalfBath  FullBath  HalfBath  BedroomAbvGr  \\\n",
       "0       1710           1.0           0.0         2         1             3   \n",
       "1       1262           0.0           1.0         2         0             3   \n",
       "2       1786           1.0           0.0         2         1             3   \n",
       "3       1717           1.0           0.0         1         0             3   \n",
       "4       2198           1.0           0.0         2         1             4   \n",
       "\n",
       "   KitchenAbvGr KitchenQual  TotRmsAbvGrd Functional  Fireplaces FireplaceQu  \\\n",
       "0             1          Gd             8        Typ           0         NaN   \n",
       "1             1          TA             6        Typ           1          TA   \n",
       "2             1          Gd             6        Typ           1          TA   \n",
       "3             1          Gd             7        Typ           1          Gd   \n",
       "4             1          Gd             9        Typ           1          TA   \n",
       "\n",
       "  GarageType  GarageYrBlt GarageFinish  GarageCars  GarageArea GarageQual  \\\n",
       "0     Attchd       2003.0          RFn         2.0       548.0         TA   \n",
       "1     Attchd       1976.0          RFn         2.0       460.0         TA   \n",
       "2     Attchd       2001.0          RFn         2.0       608.0         TA   \n",
       "3     Detchd       1998.0          Unf         3.0       642.0         TA   \n",
       "4     Attchd       2000.0          RFn         3.0       836.0         TA   \n",
       "\n",
       "  GarageCond PavedDrive  WoodDeckSF  OpenPorchSF  EnclosedPorch  3SsnPorch  \\\n",
       "0         TA          Y           0           61              0          0   \n",
       "1         TA          Y         298            0              0          0   \n",
       "2         TA          Y           0           42              0          0   \n",
       "3         TA          Y           0           35            272          0   \n",
       "4         TA          Y         192           84              0          0   \n",
       "\n",
       "   ScreenPorch  PoolArea PoolQC Fence MiscFeature  MiscVal  MoSold  YrSold  \\\n",
       "0            0         0    NaN   NaN         NaN        0       2    2008   \n",
       "1            0         0    NaN   NaN         NaN        0       5    2007   \n",
       "2            0         0    NaN   NaN         NaN        0       9    2008   \n",
       "3            0         0    NaN   NaN         NaN        0       2    2006   \n",
       "4            0         0    NaN   NaN         NaN        0      12    2008   \n",
       "\n",
       "  SaleType SaleCondition  Label  \n",
       "0       WD        Normal  train  \n",
       "1       WD        Normal  train  \n",
       "2       WD        Normal  train  \n",
       "3       WD       Abnorml  train  \n",
       "4       WD        Normal  train  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.concat([train.drop(\"SalePrice\", axis=1), test], axis=0)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Pre-processing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Dealing with NA]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# MSZoning\n",
    "## since RL is the most common value for MSZoning, impute RL for NA\n",
    "df[\"MSZoning\"] = df[\"MSZoning\"].fillna(df[\"MSZoning\"].mode()[0])\n",
    "\n",
    "# Lot Frontage\n",
    "df[\"LotFrontage\"] = df[\"LotFrontage\"].fillna(df[\"LotFrontage\"].median())\n",
    "\n",
    "# Alley\n",
    "df[\"Alley\"] = df[\"Alley\"].fillna(\"None\")\n",
    "\n",
    "# Utilities\n",
    "## since Utilities has an extremely low correlation\n",
    "df = df.drop([\"Utilities\"], axis=1)\n",
    "\n",
    "# Exterior1st & Exterior2nd\n",
    "## has only one NA\n",
    "df[\"Exterior1st\"] = df[\"Exterior1st\"].fillna(\"VinylSd\")\n",
    "df[\"Exterior2nd\"] = df[\"Exterior2nd\"].fillna(\"VinylSd\")\n",
    "\n",
    "# MasVnrType\n",
    "df[\"MasVnrType\"] = df[\"MasVnrType\"].fillna(\"None\")\n",
    "\n",
    "# MasVnrArea\n",
    "df[\"MasVnrArea\"] = df[\"MasVnrArea\"].fillna(0)\n",
    "\n",
    "# BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2\n",
    "## if this column value is left null, it means it has no basement\n",
    "for i in (\"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\",\n",
    "         \"BsmtFinType2\"):\n",
    "    df[i] = df[i].fillna(\"None\")\n",
    "\n",
    "# BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath, BsmtHalfBath, BsmtUnfSF\n",
    "for i in (\"BsmtFinSF1\", \"BsmtFinSF2\", \"TotalBsmtSF\", \"BsmtFullBath\", \n",
    "          \"BsmtHalfBath\", \"BsmtUnfSF\"):\n",
    "    df[i] = df[i].fillna(0)\n",
    "\n",
    "# Electrical\n",
    "df[\"Electrical\"] = df[\"Electrical\"].fillna(\"SBrkr\")\n",
    "\n",
    "# KitchenQual\n",
    "df[\"KitchenQual\"] = df[\"KitchenQual\"].fillna(\"TA\")\n",
    "\n",
    "# FireplaceQu\n",
    "df[\"FireplaceQu\"] = df[\"FireplaceQu\"].fillna(\"None\")\n",
    "\n",
    "# Functional\n",
    "df[\"Functional\"] = df[\"Functional\"].fillna(\"Typ\")\n",
    "\n",
    "# GarageType, GarageFinish, GarageQual, GarageCond\n",
    "for i in (\"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\"):\n",
    "    df[i] = df[i].fillna(\"None\")\n",
    "\n",
    "# GarageYrBlt, GarageArea, GarageCars\n",
    "for i in (\"GarageYrBlt\", \"GarageArea\", \"GarageCars\"):\n",
    "    df[i] = df[i].fillna(0)\n",
    "    \n",
    "# PoolQC\n",
    "df[\"PoolQC\"] = df[\"PoolQC\"].fillna(\"None\")\n",
    "\n",
    "# MiscFeature\n",
    "df[\"MiscFeature\"] = df[\"MiscFeature\"].fillna(\"None\")\n",
    "\n",
    "# Fence\n",
    "df[\"Fence\"] = df[\"Fence\"].fillna(\"None\")\n",
    "\n",
    "# SaleType\n",
    "df[\"SaleType\"] = df[\"SaleType\"].fillna(df[\"SaleType\"].mode()[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Feature Engineering]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>LandSlope</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Condition1</th>\n",
       "      <th>Condition2</th>\n",
       "      <th>BldgType</th>\n",
       "      <th>HouseStyle</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>RoofStyle</th>\n",
       "      <th>RoofMatl</th>\n",
       "      <th>Exterior1st</th>\n",
       "      <th>Exterior2nd</th>\n",
       "      <th>MasVnrType</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>ExterQual</th>\n",
       "      <th>ExterCond</th>\n",
       "      <th>Foundation</th>\n",
       "      <th>BsmtQual</th>\n",
       "      <th>BsmtCond</th>\n",
       "      <th>BsmtExposure</th>\n",
       "      <th>BsmtFinType1</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>BsmtFinType2</th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>BsmtUnfSF</th>\n",
       "      <th>TotalBsmtSF</th>\n",
       "      <th>Heating</th>\n",
       "      <th>HeatingQC</th>\n",
       "      <th>CentralAir</th>\n",
       "      <th>Electrical</th>\n",
       "      <th>1stFlrSF</th>\n",
       "      <th>2ndFlrSF</th>\n",
       "      <th>LowQualFinSF</th>\n",
       "      <th>GrLivArea</th>\n",
       "      <th>BsmtFullBath</th>\n",
       "      <th>BsmtHalfBath</th>\n",
       "      <th>FullBath</th>\n",
       "      <th>HalfBath</th>\n",
       "      <th>BedroomAbvGr</th>\n",
       "      <th>KitchenAbvGr</th>\n",
       "      <th>KitchenQual</th>\n",
       "      <th>TotRmsAbvGrd</th>\n",
       "      <th>Functional</th>\n",
       "      <th>Fireplaces</th>\n",
       "      <th>FireplaceQu</th>\n",
       "      <th>GarageType</th>\n",
       "      <th>GarageYrBlt</th>\n",
       "      <th>GarageFinish</th>\n",
       "      <th>GarageCars</th>\n",
       "      <th>GarageArea</th>\n",
       "      <th>GarageQual</th>\n",
       "      <th>GarageCond</th>\n",
       "      <th>PavedDrive</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>CollgCr</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2003</td>\n",
       "      <td>2003</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>BrkFace</td>\n",
       "      <td>196.0</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>PConc</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>No</td>\n",
       "      <td>GLQ</td>\n",
       "      <td>706.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>856.0</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>856</td>\n",
       "      <td>854</td>\n",
       "      <td>0</td>\n",
       "      <td>1710</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>8</td>\n",
       "      <td>Typ</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>2.0</td>\n",
       "      <td>548.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>FR2</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Veenker</td>\n",
       "      <td>Feedr</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>1Story</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>1976</td>\n",
       "      <td>1976</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>MetalSd</td>\n",
       "      <td>MetalSd</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>CBlock</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>Gd</td>\n",
       "      <td>ALQ</td>\n",
       "      <td>978.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0.0</td>\n",
       "      <td>284.0</td>\n",
       "      <td>1262.0</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>1262</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1262</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>6</td>\n",
       "      <td>Typ</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>1976.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>2.0</td>\n",
       "      <td>460.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>298</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>CollgCr</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>2001</td>\n",
       "      <td>2002</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>BrkFace</td>\n",
       "      <td>162.0</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>PConc</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>Mn</td>\n",
       "      <td>GLQ</td>\n",
       "      <td>486.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0.0</td>\n",
       "      <td>434.0</td>\n",
       "      <td>920.0</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>920</td>\n",
       "      <td>866</td>\n",
       "      <td>0</td>\n",
       "      <td>1786</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>6</td>\n",
       "      <td>Typ</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>2.0</td>\n",
       "      <td>608.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>Corner</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>Crawfor</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>1915</td>\n",
       "      <td>1970</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>Wd Sdng</td>\n",
       "      <td>Wd Shng</td>\n",
       "      <td>None</td>\n",
       "      <td>0.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>BrkTil</td>\n",
       "      <td>TA</td>\n",
       "      <td>Gd</td>\n",
       "      <td>No</td>\n",
       "      <td>ALQ</td>\n",
       "      <td>216.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0.0</td>\n",
       "      <td>540.0</td>\n",
       "      <td>756.0</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>961</td>\n",
       "      <td>756</td>\n",
       "      <td>0</td>\n",
       "      <td>1717</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>7</td>\n",
       "      <td>Typ</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>Detchd</td>\n",
       "      <td>1998.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>3.0</td>\n",
       "      <td>642.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>272</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>FR2</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>NoRidge</td>\n",
       "      <td>Norm</td>\n",
       "      <td>Norm</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>2Story</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000</td>\n",
       "      <td>Gable</td>\n",
       "      <td>CompShg</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>BrkFace</td>\n",
       "      <td>350.0</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>PConc</td>\n",
       "      <td>Gd</td>\n",
       "      <td>TA</td>\n",
       "      <td>Av</td>\n",
       "      <td>GLQ</td>\n",
       "      <td>655.0</td>\n",
       "      <td>Unf</td>\n",
       "      <td>0.0</td>\n",
       "      <td>490.0</td>\n",
       "      <td>1145.0</td>\n",
       "      <td>GasA</td>\n",
       "      <td>Ex</td>\n",
       "      <td>Y</td>\n",
       "      <td>SBrkr</td>\n",
       "      <td>1145</td>\n",
       "      <td>1053</td>\n",
       "      <td>0</td>\n",
       "      <td>2198</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Gd</td>\n",
       "      <td>9</td>\n",
       "      <td>Typ</td>\n",
       "      <td>1</td>\n",
       "      <td>TA</td>\n",
       "      <td>Attchd</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>RFn</td>\n",
       "      <td>3.0</td>\n",
       "      <td>836.0</td>\n",
       "      <td>TA</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>192</td>\n",
       "      <td>84</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0   1          60       RL         65.0     8450   Pave  None      Reg   \n",
       "1   2          20       RL         80.0     9600   Pave  None      Reg   \n",
       "2   3          60       RL         68.0    11250   Pave  None      IR1   \n",
       "3   4          70       RL         60.0     9550   Pave  None      IR1   \n",
       "4   5          60       RL         84.0    14260   Pave  None      IR1   \n",
       "\n",
       "  LandContour LotConfig LandSlope Neighborhood Condition1 Condition2 BldgType  \\\n",
       "0         Lvl    Inside       Gtl      CollgCr       Norm       Norm     1Fam   \n",
       "1         Lvl       FR2       Gtl      Veenker      Feedr       Norm     1Fam   \n",
       "2         Lvl    Inside       Gtl      CollgCr       Norm       Norm     1Fam   \n",
       "3         Lvl    Corner       Gtl      Crawfor       Norm       Norm     1Fam   \n",
       "4         Lvl       FR2       Gtl      NoRidge       Norm       Norm     1Fam   \n",
       "\n",
       "  HouseStyle  OverallQual  OverallCond  YearBuilt  YearRemodAdd RoofStyle  \\\n",
       "0     2Story            7            5       2003          2003     Gable   \n",
       "1     1Story            6            8       1976          1976     Gable   \n",
       "2     2Story            7            5       2001          2002     Gable   \n",
       "3     2Story            7            5       1915          1970     Gable   \n",
       "4     2Story            8            5       2000          2000     Gable   \n",
       "\n",
       "  RoofMatl Exterior1st Exterior2nd MasVnrType  MasVnrArea ExterQual ExterCond  \\\n",
       "0  CompShg     VinylSd     VinylSd    BrkFace       196.0        Gd        TA   \n",
       "1  CompShg     MetalSd     MetalSd       None         0.0        TA        TA   \n",
       "2  CompShg     VinylSd     VinylSd    BrkFace       162.0        Gd        TA   \n",
       "3  CompShg     Wd Sdng     Wd Shng       None         0.0        TA        TA   \n",
       "4  CompShg     VinylSd     VinylSd    BrkFace       350.0        Gd        TA   \n",
       "\n",
       "  Foundation BsmtQual BsmtCond BsmtExposure BsmtFinType1  BsmtFinSF1  \\\n",
       "0      PConc       Gd       TA           No          GLQ       706.0   \n",
       "1     CBlock       Gd       TA           Gd          ALQ       978.0   \n",
       "2      PConc       Gd       TA           Mn          GLQ       486.0   \n",
       "3     BrkTil       TA       Gd           No          ALQ       216.0   \n",
       "4      PConc       Gd       TA           Av          GLQ       655.0   \n",
       "\n",
       "  BsmtFinType2  BsmtFinSF2  BsmtUnfSF  TotalBsmtSF Heating HeatingQC  \\\n",
       "0          Unf         0.0      150.0        856.0    GasA        Ex   \n",
       "1          Unf         0.0      284.0       1262.0    GasA        Ex   \n",
       "2          Unf         0.0      434.0        920.0    GasA        Ex   \n",
       "3          Unf         0.0      540.0        756.0    GasA        Gd   \n",
       "4          Unf         0.0      490.0       1145.0    GasA        Ex   \n",
       "\n",
       "  CentralAir Electrical  1stFlrSF  2ndFlrSF  LowQualFinSF  GrLivArea  \\\n",
       "0          Y      SBrkr       856       854             0       1710   \n",
       "1          Y      SBrkr      1262         0             0       1262   \n",
       "2          Y      SBrkr       920       866             0       1786   \n",
       "3          Y      SBrkr       961       756             0       1717   \n",
       "4          Y      SBrkr      1145      1053             0       2198   \n",
       "\n",
       "   BsmtFullBath  BsmtHalfBath  FullBath  HalfBath  BedroomAbvGr  KitchenAbvGr  \\\n",
       "0           1.0           0.0         2         1             3             1   \n",
       "1           0.0           1.0         2         0             3             1   \n",
       "2           1.0           0.0         2         1             3             1   \n",
       "3           1.0           0.0         1         0             3             1   \n",
       "4           1.0           0.0         2         1             4             1   \n",
       "\n",
       "  KitchenQual  TotRmsAbvGrd Functional  Fireplaces FireplaceQu GarageType  \\\n",
       "0          Gd             8        Typ           0        None     Attchd   \n",
       "1          TA             6        Typ           1          TA     Attchd   \n",
       "2          Gd             6        Typ           1          TA     Attchd   \n",
       "3          Gd             7        Typ           1          Gd     Detchd   \n",
       "4          Gd             9        Typ           1          TA     Attchd   \n",
       "\n",
       "   GarageYrBlt GarageFinish  GarageCars  GarageArea GarageQual GarageCond  \\\n",
       "0       2003.0          RFn         2.0       548.0         TA         TA   \n",
       "1       1976.0          RFn         2.0       460.0         TA         TA   \n",
       "2       2001.0          RFn         2.0       608.0         TA         TA   \n",
       "3       1998.0          Unf         3.0       642.0         TA         TA   \n",
       "4       2000.0          RFn         3.0       836.0         TA         TA   \n",
       "\n",
       "  PavedDrive  WoodDeckSF  OpenPorchSF  EnclosedPorch  3SsnPorch  ScreenPorch  \\\n",
       "0          Y           0           61              0          0            0   \n",
       "1          Y         298            0              0          0            0   \n",
       "2          Y           0           42              0          0            0   \n",
       "3          Y           0           35            272          0            0   \n",
       "4          Y         192           84              0          0            0   \n",
       "\n",
       "   PoolArea PoolQC Fence MiscFeature  MiscVal  MoSold  YrSold SaleType  \\\n",
       "0         0   None  None        None        0       2    2008       WD   \n",
       "1         0   None  None        None        0       5    2007       WD   \n",
       "2         0   None  None        None        0       9    2008       WD   \n",
       "3         0   None  None        None        0       2    2006       WD   \n",
       "4         0   None  None        None        0      12    2008       WD   \n",
       "\n",
       "  SaleCondition  Label  \n",
       "0        Normal  train  \n",
       "1        Normal  train  \n",
       "2        Normal  train  \n",
       "3       Abnorml  train  \n",
       "4        Normal  train  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add up total sqfootage\n",
    "df[\"TotalSF\"] = df[\"TotalBsmtSF\"] + df[\"1stFlrSF\"] + df[\"2ndFlrSF\"]\n",
    "\n",
    "# difference between YearRemodAdd and YearBuilt\n",
    "df[\"YearRemodAdd\"] = df[\"YearRemodAdd\"].astype(int)\n",
    "df[\"YearBuilt\"] = df[\"YearBuilt\"].astype(int)\n",
    "df[\"RemodYr\"] = df[\"YearRemodAdd\"] - df[\"YearBuilt\"] # there is -1 as a value in this column\n",
    "df[\"RemodYr\"] = df[\"RemodYr\"].replace(-1, 0)\n",
    "df[\"YearBuilt\"] = df[\"YearBuilt\"].astype(str)\n",
    "df[\"YearRemodAdd\"] = df[\"YearRemodAdd\"].astype(str)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Changing Ordinal Categorical Values to Numeric]** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "ord_col = [\"OverallCond\", \"ExterQual\", \"ExterCond\",\n",
    "          \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"HeatingQC\",\n",
    "          \"KitchenQual\", \"FireplaceQu\", \"GarageQual\", \"GarageCond\",\n",
    "          \"PoolQC\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# use for loop for label encoding ordinal categorical value\n",
    "for i in ord_col:\n",
    "    df[i] = df[i].replace(\"Ex\", 10)\n",
    "    df[i] = df[i].replace(\"Gd\", 8)\n",
    "    df[i] = df[i].replace(\"TA\", 6)\n",
    "    df[i] = df[i].replace(\"Fa\", 4)\n",
    "    df[i] = df[i].replace(\"Po\", 2)\n",
    "    df[i] = df[i].replace(\"None\", 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# binning ratings as even instead of full integer range\n",
    "## OverallCond, OverallQual \n",
    "rate_col = [\"OverallCond\", \"OverallQual\"]\n",
    "for i in rate_col:\n",
    "    df[i] = df[i].replace(9, 10)\n",
    "    df[i] = df[i].replace(7, 8)\n",
    "    df[i] = df[i].replace(5, 6)\n",
    "    df[i] = df[i].replace(3, 4)\n",
    "    df[i] = df[i].replace(1, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_col = ['LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'MasVnrArea',\n",
    "        'ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'BsmtFinSF1',\n",
    "        'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'HeatingQC', '1stFlrSF',\n",
    "        '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'KitchenQual', 'FireplaceQu',\n",
    "        'GarageArea', 'GarageQual', 'GarageCond', 'WoodDeckSF', 'OpenPorchSF',\n",
    "        'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n",
    "        'MiscVal', 'TotalSF', 'RemodYr']\n",
    "cat_col = ['MSSubClass', 'MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour',\n",
    "        'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n",
    "        'BldgType', 'HouseStyle', 'YearBuilt', 'YearRemodAdd', 'RoofStyle',\n",
    "        'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation',\n",
    "        'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'CentralAir',\n",
    "        'Electrical', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath',\n",
    "        'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Functional',\n",
    "        'Fireplaces', 'GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageCars',\n",
    "        'PavedDrive', 'Fence', 'MiscFeature', 'MoSold', 'YrSold', 'SaleType',\n",
    "        'SaleCondition']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# changing numerical data type from float to int\n",
    "for i in num_col:\n",
    "    df[i] = df[i].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reassuring categorical values are set as obj\n",
    "for i in cat_col:\n",
    "    df[i] = df[i].astype(str)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Correlation]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_vif = df[df.Id.isin(train.Id.tolist())].merge(train[[\"Id\", \"SalePrice\"]], on=\"Id\", how=\"left\")\n",
    "df_vif = df_vif.drop([\"Id\", \"Label\"], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_vif = df_vif.rename(columns={\"1stFlrSF\":\"FirstFlrSF\"})\n",
    "df_vif = df_vif.rename(columns={\"2ndFlrSF\":\"SecondFlrSF\"})\n",
    "df_vif = df_vif.rename(columns={\"3SsnPorch\":\"ThreeSsnPorch\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(13,10))\n",
    "sns.heatmap(df_vif.corr(), linewidths=.025, vmax=.8);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[VIF]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "vif_num = ['LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'MasVnrArea',\n",
    "        'ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'BsmtFinSF1',\n",
    "        'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'HeatingQC', 'FirstFlrSF',\n",
    "        'SecondFlrSF', 'LowQualFinSF', 'GrLivArea', 'KitchenQual', 'FireplaceQu',\n",
    "        'GarageArea', 'GarageQual', 'GarageCond', 'WoodDeckSF', 'OpenPorchSF',\n",
    "        'EnclosedPorch', 'ThreeSsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n",
    "        'MiscVal', 'TotalSF', 'RemodYr']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from patsy import dmatrices\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'LotFrontage+LotArea+OverallQual+OverallCond+MasVnrArea+ExterQual+ExterCond+BsmtQual+BsmtCond+BsmtFinSF1+BsmtFinSF2+BsmtUnfSF+TotalBsmtSF+HeatingQC+FirstFlrSF+SecondFlrSF+LowQualFinSF+GrLivArea+KitchenQual+FireplaceQu+GarageArea+GarageQual+GarageCond+WoodDeckSF+OpenPorchSF+EnclosedPorch+ThreeSsnPorch+ScreenPorch+PoolArea+PoolQC+MiscVal+TotalSF+RemodYr'"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features = \"+\".join(df_vif[vif_num].columns)\n",
    "features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "y, X = dmatrices(\"SalePrice ~\" + features, df_vif, return_type=\"dataframe\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIF Factor</th>\n",
       "      <th>Features</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>inf</td>\n",
       "      <td>LowQualFinSF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>inf</td>\n",
       "      <td>BsmtFinSF1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>inf</td>\n",
       "      <td>TotalSF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>inf</td>\n",
       "      <td>GrLivArea</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>inf</td>\n",
       "      <td>SecondFlrSF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>inf</td>\n",
       "      <td>FirstFlrSF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>inf</td>\n",
       "      <td>TotalBsmtSF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>inf</td>\n",
       "      <td>BsmtUnfSF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>inf</td>\n",
       "      <td>BsmtFinSF2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>171.100000</td>\n",
       "      <td>Intercept</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>13.100000</td>\n",
       "      <td>GarageQual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>12.900000</td>\n",
       "      <td>GarageCond</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>9.200000</td>\n",
       "      <td>PoolQC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>8.800000</td>\n",
       "      <td>PoolArea</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3.600000</td>\n",
       "      <td>BsmtQual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>ExterQual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.900000</td>\n",
       "      <td>OverallQual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2.500000</td>\n",
       "      <td>KitchenQual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2.500000</td>\n",
       "      <td>GarageArea</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2.300000</td>\n",
       "      <td>BsmtCond</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>1.800000</td>\n",
       "      <td>RemodYr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.600000</td>\n",
       "      <td>OverallCond</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1.500000</td>\n",
       "      <td>FireplaceQu</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1.500000</td>\n",
       "      <td>HeatingQC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.400000</td>\n",
       "      <td>LotFrontage</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.400000</td>\n",
       "      <td>MasVnrArea</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1.200000</td>\n",
       "      <td>WoodDeckSF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>1.200000</td>\n",
       "      <td>OpenPorchSF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1.200000</td>\n",
       "      <td>EnclosedPorch</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1.200000</td>\n",
       "      <td>ExterCond</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.200000</td>\n",
       "      <td>LotArea</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1.100000</td>\n",
       "      <td>ScreenPorch</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>ThreeSsnPorch</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>MiscVal</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    VIF Factor       Features\n",
       "17         inf   LowQualFinSF\n",
       "10         inf     BsmtFinSF1\n",
       "32         inf        TotalSF\n",
       "18         inf      GrLivArea\n",
       "16         inf    SecondFlrSF\n",
       "15         inf     FirstFlrSF\n",
       "13         inf    TotalBsmtSF\n",
       "12         inf      BsmtUnfSF\n",
       "11         inf     BsmtFinSF2\n",
       "0   171.100000      Intercept\n",
       "22   13.100000     GarageQual\n",
       "23   12.900000     GarageCond\n",
       "30    9.200000         PoolQC\n",
       "29    8.800000       PoolArea\n",
       "8     3.600000       BsmtQual\n",
       "6     3.000000      ExterQual\n",
       "3     2.900000    OverallQual\n",
       "19    2.500000    KitchenQual\n",
       "21    2.500000     GarageArea\n",
       "9     2.300000       BsmtCond\n",
       "33    1.800000        RemodYr\n",
       "4     1.600000    OverallCond\n",
       "20    1.500000    FireplaceQu\n",
       "14    1.500000      HeatingQC\n",
       "1     1.400000    LotFrontage\n",
       "5     1.400000     MasVnrArea\n",
       "24    1.200000     WoodDeckSF\n",
       "25    1.200000    OpenPorchSF\n",
       "26    1.200000  EnclosedPorch\n",
       "7     1.200000      ExterCond\n",
       "2     1.200000        LotArea\n",
       "28    1.100000    ScreenPorch\n",
       "27    1.000000  ThreeSsnPorch\n",
       "31    1.000000        MiscVal"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vif = pd.DataFrame()\n",
    "vif[\"VIF Factor\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n",
    "vif[\"Features\"] = X.columns\n",
    "vif = vif.round(1)\n",
    "vif\n",
    "vif.sort_values(ascending=False, by=\"VIF Factor\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# multicollinearity\n",
    "df_vif = df_vif.drop(\"TotalSF\", axis=1)\n",
    "df_vif = df_vif.drop(\"TotalBsmtSF\", axis=1)\n",
    "df_vif = df_vif.drop(\"GarageQual\", axis=1)\n",
    "df_vif = df_vif.drop(\"PoolQC\", axis=1)\n",
    "## test by re-running the VIF code above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "## apply the same multicollinearity removing process to df\n",
    "df = df.drop(\"TotalSF\", axis=1)\n",
    "df = df.drop(\"TotalBsmtSF\", axis=1)\n",
    "df = df.drop(\"GarageQual\", axis=1)\n",
    "df = df.drop(\"PoolQC\", axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_col = ['LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'MasVnrArea',\n",
    "        'ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'BsmtFinSF1',\n",
    "        'BsmtFinSF2', 'BsmtUnfSF', 'HeatingQC', '1stFlrSF',\n",
    "        '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'KitchenQual', 'FireplaceQu',\n",
    "        'GarageArea', 'GarageCond', 'WoodDeckSF', 'OpenPorchSF',\n",
    "        'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n",
    "        'MiscVal', 'RemodYr']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Dummifying]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.get_dummies(df, columns=cat_col)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Merging to Original Data]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_train = df[df.Id.isin(train.Id.tolist())].merge(train[[\"Id\", \"SalePrice\"]], on=\"Id\", how=\"left\")\n",
    "df_train = df_train.drop(\"Label\", axis=1)\n",
    "df_test = df.loc[df[\"Label\"] == \"test\"]\n",
    "df_test = df_test.drop(\"Label\", axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1460, 613)\n",
      "(1459, 612)\n"
     ]
    }
   ],
   "source": [
    "print(df_train.shape)\n",
    "print(df_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Normalizing Target and Skewed Variables]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# log normalizing target variable\n",
    "df_train[\"SalePrice\"] = np.log1p(df_train[\"SalePrice\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.stats import skew"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# normalizing skewed variables in both train and test\n",
    "skewed_col = df[num_col].apply(lambda x: skew(x.dropna()))\n",
    "skewed_col = skewed_col[skewed_col > .75]\n",
    "skewed_col = skewed_col.index\n",
    "df_train[skewed_col] = np.log1p(df_train[skewed_col])\n",
    "df_test[skewed_col] = np.log1p(df_test[skewed_col])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EDA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Splitting Train Test Data]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# both X and y are based on train data\n",
    "## X and y based on df_train\n",
    "X = df_train.drop(\"SalePrice\", axis=1)\n",
    "y = df_train[\"SalePrice\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Feature Importance]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "       colsample_bytree=0.4, gamma=0, learning_rate=0.07, max_delta_step=0,\n",
       "       max_depth=3, min_child_weight=1.5, missing=None, n_estimators=10000,\n",
       "       n_jobs=-1, nthread=None, objective='reg:linear', random_state=0,\n",
       "       reg_alpha=0.75, reg_lambda=0.45, scale_pos_weight=1, seed=34,\n",
       "       silent=True, subsample=0.6)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_xgb = xgboost.XGBRegressor(colsample_bytree=.4,\n",
    "                               n_jobs=-1,\n",
    "                               gamma=0,\n",
    "                               learning_rate=.07,\n",
    "                               max_depth = 3,\n",
    "                               min_child_weight=1.5,\n",
    "                               n_estimators=10000,\n",
    "                               reg_alpha = .75,\n",
    "                               reg_lambda = .45,\n",
    "                               subsample = .6,\n",
    "                              seed = 34)\n",
    "reg_xgb.fit(X.drop(\"Id\", axis=1), y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('LotArea', 2532),\n",
       "             ('BsmtUnfSF', 2374),\n",
       "             ('GrLivArea', 2122),\n",
       "             ('1stFlrSF', 2075),\n",
       "             ('GarageArea', 1951),\n",
       "             ('LotFrontage', 1561),\n",
       "             ('BsmtFinSF1', 1475),\n",
       "             ('OpenPorchSF', 1359),\n",
       "             ('WoodDeckSF', 1281),\n",
       "             ('2ndFlrSF', 1040),\n",
       "             ('MasVnrArea', 1034),\n",
       "             ('RemodYr', 897),\n",
       "             ('EnclosedPorch', 458),\n",
       "             ('HeatingQC', 363),\n",
       "             ('FireplaceQu', 356),\n",
       "             ('BsmtFinSF2', 301),\n",
       "             ('OverallQual', 288),\n",
       "             ('BsmtQual', 283),\n",
       "             ('Neighborhood_NAmes', 282),\n",
       "             ('OverallCond', 273),\n",
       "             ('SaleCondition_Normal', 259),\n",
       "             ('ScreenPorch', 229),\n",
       "             ('YrSold_2009', 220),\n",
       "             ('YrSold_2008', 217),\n",
       "             ('YrSold_2007', 215),\n",
       "             ('BedroomAbvGr_2', 211),\n",
       "             ('MoSold_7', 211),\n",
       "             ('GarageCars_2.0', 209),\n",
       "             ('LotShape_IR1', 202),\n",
       "             ('LotShape_Reg', 200),\n",
       "             ('YrSold_2006', 196),\n",
       "             ('KitchenQual', 195),\n",
       "             ('BedroomAbvGr_3', 194),\n",
       "             ('LotConfig_Inside', 186),\n",
       "             ('MoSold_6', 185),\n",
       "             ('BsmtFullBath_1.0', 182),\n",
       "             ('GarageFinish_Fin', 181),\n",
       "             ('Fence_None', 181),\n",
       "             ('MasVnrType_BrkFace', 177),\n",
       "             ('GarageFinish_RFn', 174),\n",
       "             ('Fireplaces_1', 172),\n",
       "             ('Condition1_Norm', 171),\n",
       "             ('ExterCond', 167),\n",
       "             ('BsmtFullBath_0.0', 165),\n",
       "             ('BsmtExposure_No', 164),\n",
       "             ('TotRmsAbvGrd_6', 163),\n",
       "             ('GarageType_Attchd', 161),\n",
       "             ('BsmtFinType1_ALQ', 161),\n",
       "             ('MoSold_5', 161),\n",
       "             ('GarageFinish_Unf', 160),\n",
       "             ('TotRmsAbvGrd_7', 156),\n",
       "             ('MSSubClass_20', 155),\n",
       "             ('BedroomAbvGr_4', 154),\n",
       "             ('TotRmsAbvGrd_5', 152),\n",
       "             ('RoofStyle_Gable', 151),\n",
       "             ('Exterior2nd_VinylSd', 149),\n",
       "             ('BsmtFinType1_GLQ', 147),\n",
       "             ('Foundation_CBlock', 147),\n",
       "             ('YrSold_2010', 146),\n",
       "             ('Exterior2nd_MetalSd', 146),\n",
       "             ('Exterior1st_VinylSd', 144),\n",
       "             ('ExterQual', 141),\n",
       "             ('HalfBath_0', 140),\n",
       "             ('Exterior1st_Wd Sdng', 139),\n",
       "             ('GarageType_Detchd', 137),\n",
       "             ('Exterior1st_MetalSd', 135),\n",
       "             ('MoSold_4', 134),\n",
       "             ('MSZoning_RL', 131),\n",
       "             ('HalfBath_1', 129),\n",
       "             ('BsmtExposure_Av', 129),\n",
       "             ('LotConfig_Corner', 127),\n",
       "             ('HouseStyle_1Story', 127),\n",
       "             ('FullBath_2', 127),\n",
       "             ('SaleType_WD', 120),\n",
       "             ('LandContour_Lvl', 120),\n",
       "             ('BsmtFinType1_Rec', 119),\n",
       "             ('GarageCars_1.0', 119),\n",
       "             ('RoofStyle_Hip', 118),\n",
       "             ('FullBath_1', 117),\n",
       "             ('Exterior1st_HdBoard', 114),\n",
       "             ('Exterior2nd_Wd Sdng', 114),\n",
       "             ('GarageCond', 107),\n",
       "             ('BldgType_1Fam', 102),\n",
       "             ('Electrical_SBrkr', 101),\n",
       "             ('Fireplaces_0', 100),\n",
       "             ('MoSold_8', 99),\n",
       "             ('MoSold_10', 99),\n",
       "             ('BsmtFinType1_Unf', 96),\n",
       "             ('MoSold_12', 96),\n",
       "             ('BsmtFinType2_Unf', 95),\n",
       "             ('MasVnrType_None', 95),\n",
       "             ('HouseStyle_2Story', 94),\n",
       "             ('Foundation_PConc', 93),\n",
       "             ('Neighborhood_StoneBr', 93),\n",
       "             ('Fence_MnPrv', 93),\n",
       "             ('Exterior1st_Plywood', 93),\n",
       "             ('LandContour_Bnk', 92),\n",
       "             ('Neighborhood_Edwards', 91),\n",
       "             ('Neighborhood_Sawyer', 89),\n",
       "             ('TotRmsAbvGrd_8', 89),\n",
       "             ('Neighborhood_CollgCr', 88),\n",
       "             ('MSZoning_RM', 87),\n",
       "             ('Exterior2nd_HdBoard', 87),\n",
       "             ('CentralAir_N', 85),\n",
       "             ('MasVnrType_Stone', 84),\n",
       "             ('SaleCondition_Abnorml', 83),\n",
       "             ('PavedDrive_Y', 83),\n",
       "             ('Neighborhood_Somerst', 82),\n",
       "             ('Neighborhood_Mitchel', 82),\n",
       "             ('BsmtExposure_8', 81),\n",
       "             ('HouseStyle_1.5Fin', 80),\n",
       "             ('Neighborhood_OldTown', 79),\n",
       "             ('LotConfig_CulDSac', 79),\n",
       "             ('Exterior2nd_Plywood', 77),\n",
       "             ('TotRmsAbvGrd_4', 75),\n",
       "             ('YearRemodAdd_1950', 73),\n",
       "             ('GarageYrBlt_2007.0', 73),\n",
       "             ('Foundation_BrkTil', 73),\n",
       "             ('Functional_Typ', 72),\n",
       "             ('MSSubClass_30', 71),\n",
       "             ('Fireplaces_2', 67),\n",
       "             ('Fence_GdWo', 67),\n",
       "             ('BsmtFinType2_BLQ', 67),\n",
       "             ('BsmtFinType1_BLQ', 66),\n",
       "             ('MSZoning_C (all)', 65),\n",
       "             ('Neighborhood_NoRidge', 64),\n",
       "             ('YearBuilt_2007', 64),\n",
       "             ('Neighborhood_BrkSide', 63),\n",
       "             ('Neighborhood_NridgHt', 60),\n",
       "             ('CentralAir_Y', 59),\n",
       "             ('SaleType_New', 55),\n",
       "             ('MoSold_2', 55),\n",
       "             ('Electrical_FuseA', 55),\n",
       "             ('MoSold_3', 55),\n",
       "             ('YearRemodAdd_2007', 53),\n",
       "             ('YearRemodAdd_2006', 53),\n",
       "             ('SaleCondition_Family', 52),\n",
       "             ('KitchenAbvGr_1', 51),\n",
       "             ('MSSubClass_60', 49),\n",
       "             ('GarageYrBlt_1965.0', 49),\n",
       "             ('MSSubClass_50', 47),\n",
       "             ('BsmtHalfBath_0.0', 47),\n",
       "             ('YearBuilt_2006', 46),\n",
       "             ('BsmtHalfBath_1.0', 46),\n",
       "             ('BsmtExposure_Mn', 46),\n",
       "             ('GarageCars_3.0', 45),\n",
       "             ('GarageType_BuiltIn', 44),\n",
       "             ('BsmtCond', 43),\n",
       "             ('Alley_None', 40),\n",
       "             ('GarageYrBlt_2008.0', 40),\n",
       "             ('GarageYrBlt_2006.0', 40),\n",
       "             ('PavedDrive_N', 39),\n",
       "             ('BsmtFinType1_LwQ', 39),\n",
       "             ('MiscVal', 39),\n",
       "             ('SaleCondition_Partial', 37),\n",
       "             ('Alley_Grvl', 37),\n",
       "             ('BldgType_TwnhsE', 37),\n",
       "             ('LandSlope_Gtl', 37),\n",
       "             ('Neighborhood_NWAmes', 36),\n",
       "             ('Neighborhood_Crawfor', 35),\n",
       "             ('Exterior1st_BrkFace', 35),\n",
       "             ('YearBuilt_1965', 35),\n",
       "             ('SaleType_COD', 33),\n",
       "             ('TotRmsAbvGrd_9', 33),\n",
       "             ('Neighborhood_SawyerW', 32),\n",
       "             ('Condition1_Artery', 31),\n",
       "             ('MoSold_11', 30),\n",
       "             ('YearRemodAdd_2003', 30),\n",
       "             ('MoSold_1', 27),\n",
       "             ('LandSlope_Mod', 27),\n",
       "             ('LowQualFinSF', 27),\n",
       "             ('GarageType_None', 26),\n",
       "             ('Exterior1st_AsbShng', 26),\n",
       "             ('GarageYrBlt_1977.0', 25),\n",
       "             ('FullBath_3', 23),\n",
       "             ('TotRmsAbvGrd_10', 22),\n",
       "             ('PavedDrive_P', 22),\n",
       "             ('KitchenAbvGr_2', 21),\n",
       "             ('Neighborhood_IDOTRR', 20),\n",
       "             ('LandContour_HLS', 20),\n",
       "             ('MSSubClass_70', 20),\n",
       "             ('3SsnPorch', 20),\n",
       "             ('YearBuilt_1977', 19),\n",
       "             ('YearRemodAdd_2009', 19),\n",
       "             ('YearRemodAdd_2005', 19),\n",
       "             ('YearRemodAdd_1958', 19),\n",
       "             ('BedroomAbvGr_5', 18),\n",
       "             ('HouseStyle_SLvl', 18),\n",
       "             ('MiscFeature_None', 18),\n",
       "             ('YearRemodAdd_1965', 18),\n",
       "             ('Exterior2nd_AsbShng', 18),\n",
       "             ('Condition1_Feedr', 17),\n",
       "             ('YearRemodAdd_2000', 17),\n",
       "             ('Exterior1st_CemntBd', 16),\n",
       "             ('YearBuilt_2009', 16),\n",
       "             ('Alley_Pave', 16),\n",
       "             ('MiscFeature_Shed', 16),\n",
       "             ('YearBuilt_1910', 16),\n",
       "             ('LotConfig_FR2', 15),\n",
       "             ('PoolArea', 15),\n",
       "             ('MSSubClass_120', 15),\n",
       "             ('HouseStyle_SFoyer', 14),\n",
       "             ('MSZoning_FV', 14),\n",
       "             ('Exterior2nd_CmentBd', 14),\n",
       "             ('Fence_GdPrv', 14),\n",
       "             ('BedroomAbvGr_1', 12),\n",
       "             ('MoSold_9', 12),\n",
       "             ('YearRemodAdd_2008', 12),\n",
       "             ('GarageFinish_None', 12),\n",
       "             ('Neighborhood_Gilbert', 12),\n",
       "             ('YearRemodAdd_1977', 12),\n",
       "             ('GarageYrBlt_1976.0', 12),\n",
       "             ('Functional_Min1', 11),\n",
       "             ('GarageYrBlt_2009.0', 11),\n",
       "             ('YearBuilt_2004', 11),\n",
       "             ('Neighborhood_ClearCr', 11),\n",
       "             ('YearRemodAdd_1970', 11),\n",
       "             ('GarageYrBlt_0.0', 11),\n",
       "             ('YearBuilt_1976', 10),\n",
       "             ('MSSubClass_80', 8),\n",
       "             ('MSSubClass_90', 8),\n",
       "             ('LandContour_Low', 8),\n",
       "             ('Functional_Maj2', 8),\n",
       "             ('YearBuilt_2008', 8),\n",
       "             ('YearRemodAdd_1994', 8),\n",
       "             ('YearRemodAdd_2002', 8),\n",
       "             ('Condition2_Norm', 7),\n",
       "             ('GarageYrBlt_2004.0', 7),\n",
       "             ('Fireplaces_3', 7),\n",
       "             ('YearBuilt_1996', 7),\n",
       "             ('Heating_GasA', 7),\n",
       "             ('GarageCars_0.0', 6),\n",
       "             ('GarageType_Basment', 6),\n",
       "             ('MSSubClass_160', 6),\n",
       "             ('YearBuilt_1959', 6),\n",
       "             ('YearBuilt_1941', 6),\n",
       "             ('GarageYrBlt_1958.0', 6),\n",
       "             ('BldgType_Twnhs', 6),\n",
       "             ('Functional_Min2', 5),\n",
       "             ('TotRmsAbvGrd_11', 5),\n",
       "             ('Exterior2nd_Wd Shng', 5),\n",
       "             ('BldgType_Duplex', 5),\n",
       "             ('GarageYrBlt_2005.0', 5),\n",
       "             ('YearBuilt_2001', 5),\n",
       "             ('YearBuilt_2005', 5),\n",
       "             ('YearRemodAdd_2004', 5),\n",
       "             ('RoofMatl_CompShg', 5),\n",
       "             ('BsmtFullBath_2.0', 5),\n",
       "             ('Electrical_FuseF', 5),\n",
       "             ('YearBuilt_1920', 4),\n",
       "             ('Condition1_RRAn', 4),\n",
       "             ('SaleCondition_Alloca', 4),\n",
       "             ('YearBuilt_1916', 4),\n",
       "             ('BsmtFinType2_LwQ', 4),\n",
       "             ('Exterior2nd_Stucco', 4),\n",
       "             ('TotRmsAbvGrd_12', 4),\n",
       "             ('BsmtFinType2_Rec', 4),\n",
       "             ('Functional_Mod', 3),\n",
       "             ('BsmtExposure_0', 3),\n",
       "             ('GarageYrBlt_1970.0', 3),\n",
       "             ('YearBuilt_2003', 3),\n",
       "             ('GarageYrBlt_1974.0', 3),\n",
       "             ('YearRemodAdd_1998', 3),\n",
       "             ('YearRemodAdd_1997', 3),\n",
       "             ('YearBuilt_1935', 3),\n",
       "             ('Neighborhood_SWISU', 3),\n",
       "             ('YearRemodAdd_1996', 3),\n",
       "             ('GarageYrBlt_1996.0', 3),\n",
       "             ('YearRemodAdd_1995', 3),\n",
       "             ('GarageYrBlt_1957.0', 3),\n",
       "             ('YearBuilt_1967', 3),\n",
       "             ('Heating_Grav', 2),\n",
       "             ('YearBuilt_1968', 2),\n",
       "             ('GarageYrBlt_1990.0', 2),\n",
       "             ('LotShape_IR2', 2),\n",
       "             ('Neighborhood_Timber', 2),\n",
       "             ('GarageYrBlt_2003.0', 2),\n",
       "             ('Exterior2nd_BrkFace', 2),\n",
       "             ('YearBuilt_1957', 2),\n",
       "             ('YearBuilt_1949', 2),\n",
       "             ('Neighborhood_MeadowV', 2),\n",
       "             ('GarageYrBlt_1968.0', 2),\n",
       "             ('YearRemodAdd_1976', 2),\n",
       "             ('YearBuilt_1970', 2),\n",
       "             ('YearRemodAdd_1992', 2),\n",
       "             ('GarageYrBlt_2001.0', 2),\n",
       "             ('YearBuilt_1993', 1),\n",
       "             ('YearRemodAdd_1971', 1),\n",
       "             ('GarageYrBlt_1959.0', 1),\n",
       "             ('GarageYrBlt_1963.0', 1),\n",
       "             ('RoofStyle_Gambrel', 1),\n",
       "             ('BsmtFinType1_None', 1),\n",
       "             ('YearRemodAdd_2001', 1),\n",
       "             ('MSZoning_RH', 1),\n",
       "             ('Condition1_RRAe', 1),\n",
       "             ('YearBuilt_1900', 1),\n",
       "             ('YearBuilt_1915', 1),\n",
       "             ('GarageYrBlt_1975.0', 1),\n",
       "             ('YearRemodAdd_1969', 1),\n",
       "             ('YearBuilt_1966', 1),\n",
       "             ('YearBuilt_1930', 1),\n",
       "             ('YearRemodAdd_1991', 1),\n",
       "             ('BldgType_2fmCon', 1),\n",
       "             ('GarageYrBlt_1941.0', 1),\n",
       "             ('GarageYrBlt_1920.0', 1),\n",
       "             ('Exterior1st_Stucco', 1),\n",
       "             ('YearBuilt_1958', 1),\n",
       "             ('GarageYrBlt_1938.0', 1),\n",
       "             ('YearBuilt_1956', 1),\n",
       "             ('RoofMatl_WdShngl', 1),\n",
       "             ('GarageYrBlt_1998.0', 1),\n",
       "             ('GarageYrBlt_1930.0', 1),\n",
       "             ('Neighborhood_BrDale', 1),\n",
       "             ('YearBuilt_1990', 1),\n",
       "             ('MSSubClass_75', 1),\n",
       "             ('GarageYrBlt_1948.0', 1),\n",
       "             ('GarageYrBlt_1972.0', 1),\n",
       "             ('HouseStyle_1.5Unf', 1),\n",
       "             ('YearBuilt_1952', 1),\n",
       "             ('GarageYrBlt_1997.0', 1),\n",
       "             ('GarageYrBlt_1993.0', 1),\n",
       "             ('YearRemodAdd_1967', 1),\n",
       "             ('YearBuilt_2000', 1)])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "OrderedDict(sorted(reg_xgb.get_booster().get_fscore().items(), key=lambda x: x[1], reverse=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "219\n",
      "['ExterQual', 'OverallQual', 'GrLivArea', 'GarageArea', 'KitchenQual', 'Fireplaces_0', '1stFlrSF', 'BsmtQual', 'CentralAir_N', 'FireplaceQu', 'GarageCars_3.0', 'MSZoning_C (all)', 'OverallCond', 'LotArea', 'MSZoning_RM', 'YearRemodAdd_1950', 'BsmtFinSF1', 'LotFrontage', 'Neighborhood_IDOTRR', 'BedroomAbvGr_1', 'BsmtFinType1_GLQ', 'MSSubClass_30', '2ndFlrSF', 'MoSold_11', 'BsmtCond', 'KitchenAbvGr_1', 'PavedDrive_N', 'GarageCond', 'BsmtExposure_No', 'MSZoning_RL', 'GarageType_Attchd', 'SaleCondition_Abnorml', 'RemodYr', 'GarageFinish_Fin', 'BsmtFinType1_Unf', 'MasVnrArea', 'GarageType_None', 'CentralAir_Y', 'Fence_None', 'BsmtFullBath_0.0', 'GarageFinish_Unf', 'LotShape_Reg', 'LandContour_Bnk', 'HeatingQC', 'Exterior2nd_VinylSd', 'LotConfig_Inside', 'BsmtExposure_8', 'Functional_Typ', 'ExterCond', 'BsmtUnfSF', 'EnclosedPorch', 'WoodDeckSF', 'KitchenAbvGr_2', 'OpenPorchSF', 'Neighborhood_Edwards', 'MasVnrType_Stone', 'Fireplaces_2', 'Neighborhood_OldTown', 'Fence_GdWo', 'HalfBath_0', 'Neighborhood_Sawyer', 'LotConfig_Corner', 'BedroomAbvGr_2', 'YrSold_2009', 'PavedDrive_Y', 'Condition1_Norm', 'Foundation_PConc', 'BedroomAbvGr_3', 'ScreenPorch', 'SaleType_WD', 'Exterior1st_CemntBd', 'Exterior2nd_Plywood', 'SaleCondition_Normal', 'Neighborhood_Crawfor', 'BsmtFinType1_ALQ', 'MoSold_8', 'MoSold_1', 'SaleCondition_Partial', 'Neighborhood_CollgCr', 'Neighborhood_NAmes', 'SaleType_New', 'Exterior1st_BrkFace', 'HouseStyle_1.5Fin', 'Fireplaces_1', 'LotConfig_CulDSac', 'FullBath_3', 'HalfBath_1', 'BsmtFinType2_Unf', 'Exterior1st_AsbShng', 'Exterior2nd_HdBoard', 'HouseStyle_SFoyer', 'GarageYrBlt_2007.0', 'Neighborhood_Somerst', 'Condition1_Feedr', 'MoSold_12', 'Neighborhood_NridgHt', 'BsmtFinSF2', 'Neighborhood_SawyerW', 'Alley_Grvl', 'MasVnrType_BrkFace', 'Functional_Min1', 'RoofStyle_Hip', 'GarageType_BuiltIn', 'Exterior1st_Wd Sdng', 'Foundation_BrkTil', 'TotRmsAbvGrd_7', 'GarageYrBlt_2009.0', 'LandContour_Lvl', 'BedroomAbvGr_5', 'BedroomAbvGr_4', 'GarageFinish_RFn', 'BsmtFinType1_Rec', 'HouseStyle_1Story', 'YrSold_2006', 'MoSold_6', 'SaleCondition_Family', 'GarageCars_1.0', 'YearRemodAdd_2000', 'Neighborhood_StoneBr', 'TotRmsAbvGrd_5', 'YearBuilt_2004', 'LandContour_HLS', 'BsmtFullBath_1.0', 'TotRmsAbvGrd_6', 'MSZoning_FV', 'BldgType_TwnhsE', 'MSSubClass_20', 'FullBath_2', 'MoSold_10', 'YearBuilt_1977', 'Neighborhood_BrkSide', 'Exterior1st_VinylSd', 'Exterior1st_HdBoard', 'YrSold_2010', 'YearBuilt_2009', 'Fence_MnPrv', 'YearBuilt_2006', 'GarageType_Detchd', 'MoSold_7', 'Exterior2nd_MetalSd', 'TotRmsAbvGrd_10', 'GarageCars_2.0', 'Alley_None', 'MoSold_5', 'Alley_Pave', 'Neighborhood_ClearCr', 'MSSubClass_50', 'YrSold_2008', 'YearRemodAdd_2009', 'RoofStyle_Gable', 'BsmtHalfBath_1.0', 'FullBath_1', 'Neighborhood_NoRidge', 'YrSold_2007', 'Exterior1st_MetalSd', 'MoSold_4', 'Foundation_CBlock', 'Exterior1st_Plywood', 'LotConfig_FR2', 'BsmtExposure_Mn', 'HouseStyle_2Story', 'BldgType_1Fam', 'TotRmsAbvGrd_8', 'GarageYrBlt_2008.0', 'MoSold_9', 'Electrical_SBrkr', 'YearBuilt_1965', 'YearRemodAdd_2007', 'MasVnrType_None', 'HouseStyle_SLvl', 'YearRemodAdd_1970', 'Condition1_Artery', 'LandSlope_Mod', 'MoSold_2', 'BsmtExposure_Av', 'YearBuilt_2007', 'TotRmsAbvGrd_4', 'BsmtFinType2_BLQ', 'LotShape_IR1', 'MiscFeature_None', 'Exterior2nd_Wd Sdng', 'MSSubClass_60', 'YearRemodAdd_2005', 'BsmtHalfBath_0.0', 'Exterior2nd_CmentBd', 'LandSlope_Gtl', 'GarageYrBlt_0.0', 'Electrical_FuseA', 'YearRemodAdd_2006', 'YearRemodAdd_1965', 'GarageYrBlt_1965.0', 'SaleType_COD', 'Exterior2nd_AsbShng', 'YearRemodAdd_1958', 'BsmtFinType1_LwQ', 'Neighborhood_Mitchel', 'Neighborhood_NWAmes', 'YearRemodAdd_2003', 'YearRemodAdd_2008', 'MiscFeature_Shed', 'MiscVal', 'GarageYrBlt_1977.0', 'MoSold_3', 'TotRmsAbvGrd_9', 'BsmtFinType1_BLQ', 'YearBuilt_1976', 'LowQualFinSF', 'PavedDrive_P', 'MSSubClass_70', 'YearBuilt_1910', 'PoolArea', 'GarageFinish_None', '3SsnPorch', 'MSSubClass_120', 'Neighborhood_Gilbert', 'GarageYrBlt_2006.0', 'YearRemodAdd_1977', 'Fence_GdPrv', 'GarageYrBlt_1976.0']\n"
     ]
    }
   ],
   "source": [
    "# feature selection based on f-score\n",
    "imp_feature = list(dict((k,v) for k, v in reg_xgb.get_booster().get_fscore().items() if v>=10).keys())\n",
    "print(len(imp_feature))\n",
    "print(imp_feature)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Analyzing Top Features]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# LotFrontage\n",
    "plt.scatter(df_train.LotFrontage, y, c=\"blue\", marker=\"s\")\n",
    "plt.title(\"LotFrontage v. SalePrice\")\n",
    "plt.xlabel(\"LotFrontage\")\n",
    "plt.ylabel(\"SalePrice\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# GrLivArea\n",
    "plt.scatter(df_train.GrLivArea, y, c=\"blue\", marker=\"s\")\n",
    "plt.title(\"GrLivArea v. SalePrice\")\n",
    "plt.xlabel(\"GrLivArea\")\n",
    "plt.ylabel(\"SalePrice\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYwAAAEWCAYAAAB1xKBvAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvqOYd8AAAIABJREFUeJzt3Xu0HGWZ7/HvDxBQCIIkcuQSQESEQY26BRUHYRgxIATUQUEcshBlMUccHY8e9XgEx/sMM17Gy1GOZsKMEJRBjixFIeIlOsLoDoIGuYmiCUETDJAIKAae80dXk06nL9W96+3qqv591tpr766u6n5q793vU++1FBGYmZn1s1XZAZiZWTU4YZiZWS5OGGZmlosThpmZ5eKEYWZmuThhmJlZLk4YZhUl6T2SvpDotT8j6d0pXtuqywnDSiPpDkl/OcRxIekpHbbvK+kRSZ8uJsL0JO0saZGk30jaIOlWSW9P8D7fkfQHSb+XdLekL0t6Urf9I+KsiHhf0XFYtTlhWJ2cBtwDnCxpu247SdpmdCH19VFgR+BA4PHAAuD2RO91dkTsCDwV2Dl77y1I2jrR+1vFOWHYWJL0ekk/l7RO0uWSds+2L8t2uSG7Wn5Vy2GnAf8b+BNwfNvrhaQ3SLoNuC3b9jRJS7P3uEXSK1v2f6mkH0taL2mlpPf0iPUmSce1PN4mu4p/do5TfS5wUUTcExGPRMTNEfEfLa/18ez910taLunPe8TxPEk/kHSvpBskHdFpv4hYB1wKHJwdt1jS/5F0haT7gSOzbe9vee0TJF2fxXG7pPnZ9sdL+rykuyTdKen9Tjj15YRhY0fSXwAfAl4JPAn4FXAxQEQcnu32zIjYMSK+mB3z58Ce2X5fopE82p0IHAocJGkHYClwEfBE4BTg05L+LNv3/uw1dgZeCvyNpBO7hLwkO77pJcDdEXFdjtO9FviApNMl7d/h+R8B84AnZLFeImn79p0k7QF8DXh/tu9bgUslzemw72zgFcCPWza/GvgAMAv4ftv+hwD/BryNxu/jcOCO7OkLgI3AU4BnAUcDr8tx3lZBThg2jk4FFkXEdRHxR+CdwPMl7dPjmIXA1yPiHhoF6zGSnti2z4ciYl1EPAgcB9wREf8aERuzwv1S4K8AIuI7EfHT7Kr/JzSSwou6vPdFwAJJj8sevzrblscbgQuBs4GfZbWqY5pPRsQXIuJ3WYz/DGwHHNDhdV4DXBERV2QxLwWmgWNb9vkXSfcCNwB3AW9pee4rEfGf2bF/aHvtM2j8PZZmz98ZETdL2g04BnhzRNwfEWtoNHOdnPPcrWKcMGwc7U6jVgFARPwe+B2wR6edJT0WOIlGwUtEXAP8mkbB3Wply897A4dmzTf3ZgXpqcB/y17zUEnflrRW0n3AWcDsTu8fET8HbgKOz5LGAnImjIh4MCI+GBHPAXalUTu6RNITsjj+R9bkdV8W4+O7xLE3cFLb+byQRg2t6W8jYueI2CMiTo2ItV1+N+32onO/yt7AY4C7Wt7zszRqbFZD49T5Z9a0mkZhBEDWfLQrcGeX/V8G7ESjSekT2badaTQpfaxlv9almVcC342IF3d5zYuATwLHRMQfJH2MLgkj02yW2gr4WZZEBhIR6yV9kEaNat+seeztwFHAjRHxiKR7AHU4fCXw7xHx+kHft/n2PZ5bCezXZfsfgdkRsXHI97UKcQ3DyvYYSdu3fG1Do7A+XdK8bLTTB4H/iog7smN+Czy55TUWAouAp9No758HHAbMk/T0Lu/7VeCpkv5a0mOyr+dKOjB7fhawLksWh7BlbaXdxTTa7/+G/M1RSHp39r7bZn0TbwLuBW7JYtgIrAW2kXQOjcTYyRdo1HBeImnr7Hd5hKQ988bSw+dp/D2OkrSVpD0kPS0i7gKuAv5Z0k7Zc/tJ6tZ0ZxXnhGFluwJ4sOXrPRFxNfBuGn0Kd9G4um1tF38PcEHWDLKQxhX4xyLiNy1fy4Fv0EgmW4iIDTQK+JNp1Gh+A/wDjT4CgP8OvFfSBuAcGk1FXWWF5zXAC4Avtj6nxmiubqObAvhX4O4sjhcDL82a4a4Evg7cSqOJ7g90aTqKiJXACcD/opFgVtLopJ7xZzwifgicTqN/4j7gu2yqAZ4GbAv8jMaQ5v9g82YwqxH5BkpmZpaHaxhmZpaLE4aZmeXihGFmZrk4YZiZWS61mocxe/bs2GeffcoOw8ysMpYvX353RGyxhEwntUoY++yzD9PT02WHYWZWGZJ+1X+vBjdJmZlZLk4YZmaWixOGmZnl4oRhZma5OGGYmVkuThhmZpaLE4bZGNppJ5C2/Nqp2+LmZiPghGFWkCIL+Q0bBttuNgrJEoakRZLWSFrRsu19kn4i6XpJV0navcuxD2f7XC/p8lQxmhXJhbzVXcoaxmJgftu28yLiGRExj8Ydz87pcuyDETEv+1qQMEYzM8spWcKIiGXAurZt61se7kDv+wibmdkYGXkfhqQPSFoJnEr3Gsb2kqYlXSvpxD6vd2a27/TatWsLj9fMzBpGnjAi4l0RsRdwIXB2l93mRsQU8GrgY5L26/F650fEVERMzZmTa8FFs7E3a9Zg281GocxRUhcBr+j0RESszr7/AvgO8KzRhWU2nCIL+fXrIWLLr/Xr+x9rlspIE4ak/VseLgBu7rDPLpK2y36eDRwG/Gw0EZoNz4W81V2y+2FIWgIcAcyWtAo4FzhW0gHAI8CvgLOyfaeAsyLidcCBwGclPUIjoX04IpwwzMxKpoj6DFSampoK30DJzCw/ScuzPuO+PNPbzMxyccIws0d5DSvrxQnDzB7l5U2sFycMsx58xW22iROGWQ++4jbbxAnDzMxyccIwG5KbqGzSOGGYFaAuTVRew8p6STbT28yqx8uYWC+uYZj1MMiVdafRVG62sjpxDcOsh/Yrbmn416pLs5VNLtcwzGxkPK+l2pwwzAbgzt+Z8byWanOTlNkAunUKz6SpyqwqXMMwM7NcnDDMCpC3qcrt9lZlbpIyK0Cv+Qvdmqvcbm9V4xqGWQ4e3VMMzySvNtcwzHLw6J5ieCZ5tbmGYVYBruHYOHDCsIlWREE8ioLbNRwbB04YNtGKKoh77e92e6sL92GYJeZ2e6uLpDUMSYskrZG0omXb+yT9RNL1kq6StHuXYxdKui37WpgyTrMiuG/B6i51k9RiYH7btvMi4hkRMQ/4KnBO+0GSngCcCxwKHAKcK2mXxLGaFWaYvgV3bNu4S5owImIZsK5tW2sFfQcgOhz6EmBpRKyLiHuApWyZeMySai3AR6FXf4r7QWwclNKHIekDwGnAfcCRHXbZA1jZ8nhVtq3Ta50JnAkwd+7cYgO1yttpp84F8axZjb6FWbOqMwIpOl1amY1QKaOkIuJdEbEXcCFwdoddOl3Tdfy4RMT5ETEVEVNz5swpMkyrgX7JYP36RkHc/jVuxi152WQqe1jtRcArOmxfBezV8nhPYPVIIjIzs45GnjAk7d/ycAFwc4fdrgSOlrRL1tl9dLbNLKlmv0VRrzVp3HFfb0n7MCQtAY4AZktaRWPk07GSDgAeAX4FnJXtOwWcFRGvi4h1kt4H/Ch7qfdGxLot3sBsBpqFWKrmnkFft1d/SlVUpT/IhqMYxwbbIU1NTcX09HTZYRj9O5tH9bpl3wlv0I9Xr3ir8FGtevyTSNLyiJjKs2/ZfRhWU6muNOt+BVvn4bNuoqo+Lw1iNkYmZRmRuiT4SeMahtVGpw5Xs7oqY4CBE4bVxrhdtdahGWlQk3jOZSmjedYJwyZW6sJtUpqXWrVPhLR6ccKwJFJ13hZZyE9igW42E+70tiRSFcZFDp11H0d63eaWuOmqmpwwzBJpT0gznYNSRZN2vnXnJimzgvRrt9+wwfMPrDhlzNlxwjArSJ6hvBs2pBkC6TWcJk+3lZZT1uqcMGzGXFgNr6ghkHWfAW/jwQnDZsyFldlkcMKwsdetBtOsxVR9xI1rZ1YVThg29nrVVDZs2NSWW/XE0cq1MxtHThhWGy5kzdJywrBamPQmnDovi27jwwnDZmwcCquq1S6KXmupjCGWk8KjADfxTG+bMRdKg/OyJNXhUYCbuIZhY69XTaWuTS51PS+rNtcwbCip7tndySTVYLwkuI0z1zBsKK6mW1ncp1AeJ4wJl/LD1++1ez0/qYXCJJ3rsKp+sVLl/20njAmX8sPX77V7PT9oXHVs828/1yoXNFVW9CjAKie8ZH0YkhYBxwFrIuLgbNt5wPHAQ8DtwOkRcW+HY+8ANgAPAxsjYipVnFYPVfiwzVSVC5oqm6Q+tH5S1jAWA/Pbti0FDo6IZwC3Au/scfyRETHPyaI843r12ukquyo6zZXoxbUIGyfJEkZELAPWtW27KiI2Zg+vBfZM9f5WjEGbgOrYNDQOXIuwcVBmH8Zrga93eS6AqyQtl3RmrxeRdKakaUnTa9euLTxI68wzi20YRfTD+GKlPKUkDEnvAjYCF3bZ5bCIeDZwDPAGSYd3e62IOD8ipiJias6cOQmirbciP2TthUEvVWpGSm2SCroi+mGqfrFS5YQ38oQhaSGNzvBTIzq34EbE6uz7GuAy4JDRRThZmh++XvJe/fX60Odpry96faVx1OlqurUATMUjrMZHlRPeSBOGpPnA24EFEfFAl312kDSr+TNwNLBidFFaO7efFyvF77Nf4e8RVlaEZAlD0hLgGuAASasknQF8EpgFLJV0vaTPZPvuLumK7NDdgO9LugH4IfC1iPhGqjitoQrV4Ukwk79Ds/DvVJuYiTy1E9dgJoO6tApV0tTUVExPT5cdRmX1Kljy/Jv0Or65xlSe9+i2TlWd5P3YDVrYRwx3zLAxNI/N+78z0/8xK56k5XmnL3imdw2VudxHN8N0atrgPJjAUnLCqKEyl/vop8ojRMyKVMVmPCcMe9QoCvN+I0RaP0SWnhN1eao4EMH3w7BHdRrW1+xPKLoAn4R+iplIlTDd1Gcz4RqG9ZSqUHeymJlZswYv/IetTeSpeeatnbpJstpcw7CRcIHQX95aV95E0W2/Qe+WmGdCWd5JZ1WYnGbd5a5hSHqhpNOzn+dI2jddWDaIQZbkGJUqzmIt2zC1rmGu2KvYdm7jIVfCkHQujRnazeXIHwN8IVVQNpiiP+hFdDyPS+KquyovMzHpqtg8l7dJ6mXAs4DroLHWU3P5DqsfX2mapVfFpJ63SeqhbKHAgEfXeDIzswmSN2F8SdJngZ0lvR74JvB/04VlVm/DrPU0itV8x33imJUrV5NURPyTpBcD64EDgHMiYmnSyCwJqftomBTv1TSq96yyWbMGv8Nh0e8DbpK07nIljGxE1PeaSULSYyXtExF3pAzO8ulXALRr33cUk+hcCPXXnlBb/y6tkydnmnybx3pggg0qb5PUJcAjLY8fzrbZGJjpDXhcmJevU/NUmcNfq7bGkY1G3lFS20TEQ80HEfGQpG0TxWQ15SvaavOFheWtYayVtKD5QNIJwN1pQrJR8CJ/9ZdiNVTXPCZb3hrGWcCFkj4JCFgJnJYsKktuHK4W89x8ZxLl+X3kWd6jX5PWoH1f3YzD/5KNRt5RUrcDz5O0I4279PlfZEiDdDAP0rk56Ov6Q15tRfRvtP9vOXFbPz0ThqTXRMQXJL2lbTsAEfGRhLHV0jCjmWZyNdm+/6AxNA1z68+8nMDMqqFfDaM5o9vLgJSo19XkIIX4TAvlbgX7TBIReJinWVX0TBgR8VlJWwPrI+KjI4rJxlSe5rG8hf44L7A2qXpdEKxf74RuOUZJRcTDwIJ++5n149VUR6vXaqidRlBt2LDpxkyd/lZVXF3VipV3lNQPshFSXwTub26MiOuSRGVjp9vVZftkwX7NVlaMPL/nXkm529+zV7Oik7zlTRgvyL6/t2VbAH/R7QBJi4DjgDURcXC27TzgeOAh4Hbg9Ii4t8Ox84GPA1sDn4uID+eMs1aqWMj2K1R6deDbJv0GGbjwtjLkmrgXEUd2+OqaLDKLgflt25YCB0fEM4Bb2XRDpkdlfSafAo4BDgJOkXRQnjjrJkWhUHTB3GkiV6/JXL7bW3/Nv9EkNAH1mlyYYuKhzUzPhCHpUEk3SPq9pGskHZj3hSNiGbCubdtVEbExe3gtsGeHQw8Bfh4Rv8iWI7kYOCHv+9ZFikJhlCvGOgEMplOfQd676VW5YO11AeGLi/HTr4bxKeCtwK7AR4CPFfjerwW+3mH7HjRmkjetyrZ1JOlMSdOSpteuXVtgeOVqDpktcmRKv85LK8dM/x4uWG1U+iWMrSJiaUT8MSIuAeYU8aaS3gVsBC7s9HSHbV3XYY2I8yNiKiKm5swpJLykUtUcBtF+5ZpK1a52y1JGf8QkNHdZ8fp1eu8s6eXdHkfElwd9Q0kLaXSGH5Xd9rXdKmCvlsd7AqsHfZ9xMIr7TLQ3M43rWHlf7Y4Xd5rbMPoljO/SGNXU6XEAAyWMbPTT24EXRcQDXXb7EbB/dtOmO4GTgVcP8j7jInUhOWztYBSJzMzqp99M79OHfWFJS4AjgNmSVgHn0hgVtR2wNFuP6tqIOEvS7jSGzx4bERslnQ1cSWNY7aKIuHHYOGxzThbWSZ71ylIYZrkZN5uVR51bhdp2knYDPgjsHhHHZMNcnx8Rn08d4CCmpqZienq67DAe1at5qPXXPmwzUqc/Xb/3LLPJquz3L0u/xRWHrSn2+10OUtjn/V+1+pG0PCKm8uyb9wZKi2lc8e+ePb4VePPgoVlRqniVNUkd361LbPQrtFMMh/XyK5ZC3oQxOyK+RHZf72wuxcPJorK+qlYYTNoS5q3DogetVU3S78mqJW/CuF/SrmTDWyU9D7gvWVQ14aGLm7gQNKu+vGtJvQW4HNhP0n/SmI/xV8miqolxqwVMYv9BVXX6W41ypr5ZJ3lv0XqdpBcBB9CYWHdLRPwpaWQTZNKaa2w4Kf9HvMqw5dHvFq0v7/LUUyUNNXHPttTtqnGYGoGTjw3DNRfLo18N4/gezw08cc/Sa//guxnKzIqSbOKepdVMBG7XrpdJnati1ZC30xtJLwX+DNi+uS0i3tv9iPFX1uzWQePpZSbNT+0TslxQmVkvuYbVSvoM8CrgjTQ6vU8C9k4Y10ikXBZ6mHsUuO+hmope9dfDsW1c5Z2H8YKIOA24JyL+Hng+m68oa218j4LJ06ugH2Q5+bw3TnJisVHL2yT1YPb9gWyhwHXAvmlCqo4qNOF4uGRarb/HUTdjuu/KRi1vwviqpJ2BfwSWZ9s+lyYkK9IghYqH5PZWVN+Wk7hVVb95GM8FVkbE+7LHOwI/BW4GPpo+PCvaIB3rTiCbK+qKPu/rjNugDLN+fRifBR4CkHQ48OFs233A+WlDS2/c2oBHEc8gCcDJolzuB7Nx069JauuIWJf9/Crg/Ii4FLhU0vVpQ0tv3K7SesVThf6SuhvHuS+uhdgo9athbC2pmVSOAr7V8lzuORxWvuYwX5u51qXLy77Hh2shNkr9Cv0lwHcl3U1jpNT3ACQ9BS9vXikuQNJoJg9f0dsk6Lc0yAckXQ08CbgqNt3PdSsak/hsCOPYtGEz44Rsk6Bvs1JEXNth261pwpksgxQyZQzF9CgpM2uVd6a3lSzv7N+i39NzA8ozbqP4zJwwZmASPridEpWNRp6LBCcVGyUnjAkxTAHSbSSQC6nxUUbN0yZXsoQhaZGkNZJWtGw7SdKNkh6RNNXj2Dsk/VTS9ZKmU8U4U1Vq3+9WsOSpOWzYsPnqu63n3bqwXh0Kqeb5DHOcWd2lrGEsBua3bVsBvBxYluP4IyNiXkR0TSyj0m2p8pmqUiEzKeP98yS99tVn8yTLYZa7Nxs3yRJGRCyjsapt67abIuKWVO+ZyjCFYr+r+bpckberUhLspFmA9zqPYf4fJiXhWr2Nax9GAFdJWi7pzF47SjpT0rSk6bVr144oPOum6iOrmgV4HZO52UyNa8I4LCKeDRwDvCFb+LCjiDg/IqYiYmrOnDmji9C6cmFrVk9jmTAiYnX2fQ1wGXBIuRFNhirXDMwsvbFLGJJ2kDSr+TNwNI3OckusdSRVXkUPsa3KPA93XNskSjmsdglwDXCApFWSzpD0MkmraNwT/GuSrsz23V3SFdmhuwHfl3QD8EPgaxHxjVRxlqmqI2fydNw3k0+V5U16eTquPXfF6iDZEuURcUqXpy7rsO9q4Njs518Az0wV1zip6siZ5uqsUL97MfS6R/dMhlJX9fdh1mrsmqRsc+NaC9mwoXfCK2quyqg1Jyma2ZacMBLqVtgPUuBXtRYyrHFIMs2EV1TiGNekbzYoJ4yEehXq417gu21985rSTBLZpCV9qy8njESqfvVYh07rUZlJcnVNw6rECaOHmdwH2yNn0ij7d5NiiRfXNKwqko2SqoPUH+RxHjmz007jWZA1f2fj0NdhNmlcw0igyKvgsmoh45gsyq5dmE061zCG1K99v98VcN7Cb5xrIalVeT5HK98b3erCCaMkzfH+dSgQi1ZGZ3uviYjt+wzKzWhWF26SSiRP4eKrzvI1b4a0fn3/5D3T5O5BDlZ1rmEk0lq4+MpyMM2lR3oV0O21kEF+x71qMN2aj4oo1F2btKpzDcM66nU13BxOOkghmvf+4U2pal/9Yu5273MX9mauYVgXeQrImdSiRtkR7AmIZsVwDcOS63RVX/RMcvcPmKXnhNFDUYXQpBdm7bWV1sX4ehlk0T43JZml5yapHooqbFxobS5vU1S/5dPzqMtcDrNx4BqGFaJXbam9hjDT1xuEhy6bFcc1DCtEp6v4YYYTt/ZreDiy2XhxDcMmjm9oZDYcJwybOL6hkdlwnDBsbLT3W0zKKDKzqnAfhpUizxyMbqObBunbmDVrfO/tYVY1yWoYkhZJWiNpRcu2kyTdKOkRSVM9jp0v6RZJP5f0jlQxWlplzD/pNA/DycKsGCmbpBYD89u2rQBeDizrdpCkrYFPAccABwGnSDooUYyWUPtkutYlxFN1NjdfK+/kQDPLL1nCiIhlwLq2bTdFxC19Dj0E+HlE/CIiHgIuBk5IFKaN0Cg6m5uvNcxrus/ErLdx7MPYA1jZ8ngVcGhJsVjNeWFCs/zGcZRUp0aErh9rSWdKmpY0vXbt2oRhmZlNtnFMGKuAvVoe7wms7rZzRJwfEVMRMTVnzpzkwdn4G/XyI2aTYhwTxo+A/SXtK2lb4GTg8pJjqo1RzXLu9D7jwivZmg0n5bDaJcA1wAGSVkk6Q9LLJK0Cng98TdKV2b67S7oCICI2AmcDVwI3AV+KiBtTxTlpRjXLeZDXG+WVvmsVZsNL1ukdEad0eeqyDvuuBo5teXwFcEWi0KxkM+1oznu3PndomxVrHJukrERVWJivdX6HmY2OE4ZtxgvzmVk3ThhWaZN++1uzUXLCmDCjKmBH9T6+l7fZ6IzjTG9LaFQFqQtss/pxDcPMzHJxwjAzs1ycMGwz7kQ2s27ch2Gbcd+DmXXjGoaZmeXihGFmZrk4YZiZWS5OGGZmlosThpmZ5eKEYWZmuThhmJlZLk4YZmaWixOGVVYVbvZkVidOGDa0sgts3+zJbLScMGxoLrDNJosThpmZ5eKEYcmV3XRlZsVwwrDk3HRlVg/JEoakRZLWSFrRsu0JkpZKui37vkuXYx+WdH32dXmqGK3afO8Os9FKWcNYDMxv2/YO4OqI2B+4OnvcyYMRMS/7WpAwRpuBsgvs9eshYssv39PDLI1kCSMilgHr2jafAFyQ/XwBcGKq97f0xqnAdj+JWXqj7sPYLSLuAsi+P7HLfttLmpZ0rSQnFeubENxPYpbeuN6idW5ErJb0ZOBbkn4aEbd32lHSmcCZAHPnzh1ljJbTrFmdC+5Bmq6cEMzKN+oaxm8lPQkg+76m004RsTr7/gvgO8Czur1gRJwfEVMRMTVnzpziI7YZG6emKzMb3qgTxuXAwuznhcBX2neQtIuk7bKfZwOHAT8bWYRmZtZRymG1S4BrgAMkrZJ0BvBh4MWSbgNenD1G0pSkz2WHHghMS7oB+Dbw4YhwwjAzK1myPoyIOKXLU0d12HcaeF328w+Ap6eKy+qpiH4SM+ttXDu9zTbTLyG4P8QsPScMqwQnBLPyeS0pMzPLxQnDzMxyccIwM7NcnDDMzCwXJwwzM8vFCcPMzHJRRJQdQ2EkrQV+1bZ5NnB3CeGUZZLO1+daX5N0vmWf694RkWshvloljE4kTUfEVNlxjMokna/Ptb4m6XyrdK5ukjIzs1ycMMzMLJdJSBjnlx3AiE3S+fpc62uSzrcy51r7PgwzMyvGJNQwzMysAE4YZmaWS20ThqQDJF3f8rVe0pvLjisVSX8n6UZJKyQtkbR92TGlIulN2XneWMe/qaRFktZIWtGy7QmSlkq6Lfu+S5kxFqXLuZ6U/W0fkVSJ4aZ5dTnf8yTdLOknki6TtHOZMfZS24QREbdExLyImAc8B3gAuKzksJKQtAfwt8BURBwMbA2cXG5UaUg6GHg9cAjwTOA4SfuXG1XhFgPz27a9A7g6IvYHrs4e18FitjzXFcDLgWUjjya9xWx5vkuBgyPiGcCtwDtHHVRetU0YbY4Cbo+I9lngdbIN8FhJ2wCPA1aXHE8qBwLXRsQDEbER+C7wspJjKlRELAPWtW0+Abgg+/kC4MSRBpVIp3ONiJsi4paSQkqqy/lelf0vA1wL7DnywHKalIRxMrCk7CBSiYg7gX8Cfg3cBdwXEVeVG1UyK4DDJe0q6XHAscBeJcc0CrtFxF0A2fcnlhyPpfFa4OtlB9FN7ROGpG2BBcAlZceSStaefQKwL7A7sIOk15QbVRoRcRPwDzSq8d8AbgA29jzIrAIkvYvG//KFZcfSTe0TBnAMcF1E/LbsQBL6S+CXEbE2Iv4EfBl4QckxJRMRn4+IZ0fE4TSq97eVHdMI/FbSkwCy72tKjscKJGkhcBxwaozx5LhJSBinUOPmqMyvgedJepwk0eizuankmJKR9MTs+1wanaN1//sCXA4szH5eCHylxFisQJLmA28HFkTEA2XH00utZ3pnbdwrgSdHxH1lx5OSpL8HXkWjSvtj4HUR8cdyo0pD0veAXYE/AW+JiKtLDqlQkpYAR9BY9vq3wLnA/wO+BMylcYFIBo68AAACTUlEQVRwUkS0d4xXTpdzXQd8ApgD3AtcHxEvKSvGInU533cC2wG/y3a7NiLOKiXAPmqdMMzMrDiT0CRlZmYFcMIwM7NcnDDMzCwXJwwzM8vFCcPMzHJxwjDrQdLvB9j3REkHtW3bRtLdkj5UfHRmo+WEYVacE4GD2rYdDdwCvDKbVLkFSVunDsysCE4YZgOStLekq7P7F1wtaa6kF9BYs+y87P4r+2W7nwJ8nGw2fstr3CHpHEnfB06StJ+kb0haLul7kp6W7Xe8pP+S9GNJ35S024hP1+xRThhmg/sk8G/Z/QsuBP4lIn5AY/mOt2X3Ybld0mNpLNPyVRrLl5zS9jp/iIgXRsTFwPnAGyPiOcBbgU9n+3wfeF5EPAu4GPifqU/OrJttyg7ArIKeT2MNK4B/B/6xy37HAd+OiAckXQq8W9LfRcTD2fNfBJC0I43FIi9pabXaLvu+J/DFbMHBbYFfFnomZgNwwjCbuW7r65wCHCbpjuzxrsCRwDezx/dn37cC7s3uDtnuE8BHIuJySUcA7ykiYLNhuEnKbHA/YNMtcE+l0WwEsAGYBSBpJ+CFwNyI2Cci9gHewJbNUkTEeuCXkk7KjpWkZ2ZPPx64M/t5YfuxZqPkhGHW2+MkrWr5eguN+6efLuknwF8Db8r2vRh4m6QfAycB32pbMfgrwAJJ27GlU4EzJN0A3EjjhljQqFFckq3Qe3fRJ2c2CK9Wa2ZmubiGYWZmuThhmJlZLk4YZmaWixOGmZnl4oRhZma5OGGYmVkuThhmZpbL/wcBSMpYiqjCVAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# LotArea\n",
    "plt.scatter(df_train.LotArea, y, c=\"blue\", marker=\"s\")\n",
    "plt.title(\"LotArea v. SalePrice\")\n",
    "plt.xlabel(\"LotArea\")\n",
    "plt.ylabel(\"SalePrice\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Removing Outliers]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# have to use df_train since need to use a train data that both contains data and target variable\n",
    "## going to reassign X_train and y values later\n",
    "df_train = df_train[df_train.GrLivArea < 8.25]\n",
    "df_train = df_train[df_train.LotArea < 11.5]\n",
    "df_train = df_train[df_train.LotFrontage < 8.45 ]\n",
    "df_train = df_train[df_train.SalePrice < 13]\n",
    "df_train = df_train[df_train.SalePrice > 10.75] # (1434, 617)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Reassigning X and y]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# X and y are both based on train dataset\n",
    "# new train set (read df_train.csv file to utilize the original modified train data)\n",
    "X_imp = df_train[imp_feature] # dataframe\n",
    "y_imp = df_train[\"SalePrice\"] # series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X_imp, y_imp, test_size=.2, random_state=34)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1434, 219)\n",
      "(1434,)\n"
     ]
    }
   ],
   "source": [
    "print(X_imp.shape)\n",
    "print(y_imp.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[User-defined Function]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# prints R2 and RMSE score\n",
    "def score(prediction, labels):\n",
    "    print(\"R2: {}\".format(r2_score(prediction, labels)))\n",
    "    print(\"RMSE: {}\".format(np.sqrt(mean_squared_error(prediction, labels))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# shows scores for train and test sets\n",
    "def train_test(estimator, X_train, X_test, y_train, y_test):\n",
    "    pred_train = estimator.predict(X_train)\n",
    "    print(estimator)\n",
    "    print(\"[Train]\")\n",
    "    score(pred_train, y_train)\n",
    "    pred_test = estimator.predict(X_test)\n",
    "    print(\"[Test]\")\n",
    "    score(pred_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# First Level Models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Base Regressor Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Ridge Regression]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "ridge = Ridge(alpha=11)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[LASSO Regression]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Elastic Net for Regularization]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "enet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Kernel Ridge Regression]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "krr = KernelRidge(alpha=.6, kernel=\"polynomial\", degree=2, coef0=2.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Gradient Boost]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_gb = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n",
    "                                   max_depth=4, max_features='sqrt',\n",
    "                                   min_samples_leaf=15, min_samples_split=10, \n",
    "                                   loss='huber', random_state =5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[XG Boost]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_xgb = xgboost.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n",
    "                             learning_rate=0.05, max_depth=3, \n",
    "                             min_child_weight=1.7817, n_estimators=2200,\n",
    "                             reg_alpha=0.4640, reg_lambda=0.8571,\n",
    "                             subsample=0.5213, silent=1,\n",
    "                             random_state =7, nthread = -1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Light GBM]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n",
    "                              learning_rate=0.05, n_estimators=720,\n",
    "                              max_bin = 55, bagging_fraction = 0.8,\n",
    "                              bagging_freq = 5, feature_fraction = 0.2319,\n",
    "                              feature_fraction_seed=9, bagging_seed=9,\n",
    "                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1147, 219)\n",
      "(287, 219)\n",
      "(1147,)\n",
      "(287,)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "print(y_train.shape)\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Ridge]\n",
      "Ridge(alpha=11, copy_X=True, fit_intercept=True, max_iter=None,\n",
      "   normalize=False, random_state=None, solver='auto', tol=0.001)\n",
      "[Train]\n",
      "R2: 0.928032458347401\n",
      "RMSE: 0.09583321730910412\n",
      "[Test]\n",
      "R2: 0.9007795673960624\n",
      "RMSE: 0.10549190514384815\n",
      "Accuracy: 0.8855 (0.0228)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"[Ridge]\")\n",
    "ridge.fit(X_train, y_train)\n",
    "train_test(ridge, X_train, X_test, y_train, y_test)\n",
    "acc_score = cross_val_score(ridge, X, y, cv=5)\n",
    "print(\"Accuracy: {:.4f} ({:.4f})\\n\".format(acc_score.mean(), acc_score.std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LASSO]\n",
      "Pipeline(memory=None,\n",
      "     steps=[('robustscaler', RobustScaler(copy=True, quantile_range=(25.0, 75.0), with_centering=True,\n",
      "       with_scaling=True)), ('lasso', Lasso(alpha=0.0005, copy_X=True, fit_intercept=True, max_iter=1000,\n",
      "   normalize=False, positive=False, precompute=False, random_state=1,\n",
      "   selection='cyclic', tol=0.0001, warm_start=False))])\n",
      "[Train]\n",
      "R2: 0.9259550429816955\n",
      "RMSE: 0.09736060829622946\n",
      "[Test]\n",
      "R2: 0.902726787913306\n",
      "RMSE: 0.10454897254755142\n",
      "Accuracy: 0.8981 (0.0211)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"[LASSO]\")\n",
    "lasso.fit(X_train, y_train)\n",
    "train_test(lasso, X_train, X_test, y_train, y_test)\n",
    "\n",
    "acc_score = cross_val_score(lasso, X, y, cv=5)\n",
    "print(\"Accuracy: {:.4f} ({:.4f})\\n\".format(acc_score.mean(), acc_score.std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Elastic Net]\n",
      "Pipeline(memory=None,\n",
      "     steps=[('robustscaler', RobustScaler(copy=True, quantile_range=(25.0, 75.0), with_centering=True,\n",
      "       with_scaling=True)), ('elasticnet', ElasticNet(alpha=0.0005, copy_X=True, fit_intercept=True, l1_ratio=0.9,\n",
      "      max_iter=1000, normalize=False, positive=False, precompute=False,\n",
      "      random_state=3, selection='cyclic', tol=0.0001, warm_start=False))])\n",
      "[Train]\n",
      "R2: 0.9272001967546016\n",
      "RMSE: 0.09664495769853455\n",
      "[Test]\n",
      "R2: 0.9024998013774941\n",
      "RMSE: 0.10478353574362183\n",
      "Accuracy: 0.8976 (0.0211)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"[Elastic Net]\")\n",
    "enet.fit(X_train, y_train)\n",
    "train_test(enet, X_train, X_test, y_train, y_test)\n",
    "\n",
    "acc_score = cross_val_score(enet, X, y, cv=5)\n",
    "print(\"Accuracy: {:.4f} ({:.4f})\\n\".format(acc_score.mean(), acc_score.std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Kernel Ridge Regression]\n",
      "KernelRidge(alpha=0.6, coef0=2.5, degree=2, gamma=None, kernel='polynomial',\n",
      "      kernel_params=None)\n",
      "[Train]\n",
      "R2: 0.9576540887322298\n",
      "RMSE: 0.07547307447905403\n",
      "[Test]\n",
      "R2: 0.8688651174425573\n",
      "RMSE: 0.12171917761454688\n",
      "Accuracy: 0.6650 (0.1641)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"[Kernel Ridge Regression]\")\n",
    "krr.fit(X_train, y_train)\n",
    "train_test(krr, X_train, X_test, y_train, y_test)\n",
    "\n",
    "acc_score = cross_val_score(krr, X, y, cv=5)\n",
    "print(\"Accuracy: {:.4f} ({:.4f})\\n\".format(acc_score.mean(), acc_score.std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Gradient Boost]\n",
      "GradientBoostingRegressor(alpha=0.9, criterion='friedman_mse', init=None,\n",
      "             learning_rate=0.05, loss='huber', max_depth=4,\n",
      "             max_features='sqrt', max_leaf_nodes=None,\n",
      "             min_impurity_decrease=0.0, min_impurity_split=None,\n",
      "             min_samples_leaf=15, min_samples_split=10,\n",
      "             min_weight_fraction_leaf=0.0, n_estimators=3000,\n",
      "             n_iter_no_change=None, presort='auto', random_state=5,\n",
      "             subsample=1.0, tol=0.0001, validation_fraction=0.1, verbose=0,\n",
      "             warm_start=False)\n",
      "[Train]\n",
      "R2: 0.9852069847552438\n",
      "RMSE: 0.044632928649333964\n",
      "[Test]\n",
      "R2: 0.9072047178566619\n",
      "RMSE: 0.10237130369726542\n",
      "Accuracy: 0.8984 (0.0127)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"[Gradient Boost]\")\n",
    "reg_gb.fit(X_train, y_train)\n",
    "train_test(reg_gb, X_train, X_test, y_train, y_test)\n",
    "\n",
    "acc_score = cross_val_score(reg_gb, X, y, cv=5)\n",
    "print(\"Accuracy: {:.4f} ({:.4f})\\n\".format(acc_score.mean(), acc_score.std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[XG Boost]\n",
      "XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
      "       colsample_bytree=0.4603, gamma=0.0468, learning_rate=0.05,\n",
      "       max_delta_step=0, max_depth=3, min_child_weight=1.7817,\n",
      "       missing=None, n_estimators=2200, n_jobs=1, nthread=-1,\n",
      "       objective='reg:linear', random_state=7, reg_alpha=0.464,\n",
      "       reg_lambda=0.8571, scale_pos_weight=1, seed=None, silent=1,\n",
      "       subsample=0.5213)\n",
      "[Train]\n",
      "R2: 0.9430596762181811\n",
      "RMSE: 0.08561899289266175\n",
      "[Test]\n",
      "R2: 0.8991042576549411\n",
      "RMSE: 0.10735037018364177\n",
      "Accuracy: 0.9005 (0.0093)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"[XG Boost]\")\n",
    "reg_xgb.fit(X_train, y_train)\n",
    "train_test(reg_xgb, X_train, X_test, y_train, y_test)\n",
    "\n",
    "acc_score = cross_val_score(reg_xgb, X, y, cv=5)\n",
    "print(\"Accuracy: {:.4f} ({:.4f})\\n\".format(acc_score.mean(), acc_score.std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Light GBM]\n",
      "LGBMRegressor(bagging_fraction=0.8, bagging_freq=5, bagging_seed=9,\n",
      "       boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,\n",
      "       feature_fraction=0.2319, feature_fraction_seed=9,\n",
      "       importance_type='split', learning_rate=0.05, max_bin=55,\n",
      "       max_depth=-1, min_child_samples=20, min_child_weight=0.001,\n",
      "       min_data_in_leaf=6, min_split_gain=0.0, min_sum_hessian_in_leaf=11,\n",
      "       n_estimators=720, n_jobs=-1, num_leaves=5, objective='regression',\n",
      "       random_state=None, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n",
      "       subsample=1.0, subsample_for_bin=200000, subsample_freq=0)\n",
      "[Train]\n",
      "R2: 0.9635925366672278\n",
      "RMSE: 0.06928936649034957\n",
      "[Test]\n",
      "R2: 0.9052518627435038\n",
      "RMSE: 0.10556117265128452\n",
      "Accuracy: 0.8982 (0.0115)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"[Light GBM]\")\n",
    "reg_lgb.fit(X_train, y_train)\n",
    "train_test(reg_lgb, X_train, X_test, y_train, y_test)\n",
    "\n",
    "acc_score = cross_val_score(reg_lgb, X, y, cv=5)\n",
    "print(\"Accuracy: {:.4f} ({:.4f})\\n\".format(acc_score.mean(), acc_score.std()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simply Averaging Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# class average_models(BaseEstimator, RegressorMixin, TransformerMixin):\n",
    "#     def __init__(self, models):\n",
    "#         self.models = models\n",
    "    \n",
    "#     def fit(self, X, y):\n",
    "#         self.models_ = [clone(x) for x in self.models]\n",
    "#         for model in self.models_:\n",
    "#             model.fit(X, y)\n",
    "#         return self\n",
    "    \n",
    "#     def predict(self, X):\n",
    "#         predict = np.column_stack([model.predict(X) for model in self.models_])\n",
    "#         return np.mean(predict, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Predicting Model]**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df_train[imp_feature]\n",
    "y = df_train[\"SalePrice\"]\n",
    "X_test = df_test[imp_feature]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LGBMRegressor(bagging_fraction=0.8, bagging_freq=5, bagging_seed=9,\n",
       "       boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,\n",
       "       feature_fraction=0.2319, feature_fraction_seed=9,\n",
       "       importance_type='split', learning_rate=0.05, max_bin=55,\n",
       "       max_depth=-1, min_child_samples=20, min_child_weight=0.001,\n",
       "       min_data_in_leaf=6, min_split_gain=0.0, min_sum_hessian_in_leaf=11,\n",
       "       n_estimators=720, n_jobs=-1, num_leaves=5, objective='regression',\n",
       "       random_state=None, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n",
       "       subsample=1.0, subsample_for_bin=200000, subsample_freq=0)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso.fit(X, y)\n",
    "enet.fit(X, y)\n",
    "reg_xgb.fit(X, y)\n",
    "reg_gb.fit(X, y)\n",
    "reg_lgb.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_lasso = lasso.predict(X_test)\n",
    "pred_enet = enet.predict(X_test)\n",
    "pred_xgb = reg_xgb.predict(X_test)\n",
    "pred_gb = reg_gb.predict(X_test)\n",
    "pred_lgb = reg_lgb.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "fin_model = (np.exp(pred_xgb)*.8) + (np.exp(pred_gb)*.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Export to CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "# submitting file\n",
    "df_test[\"Prediction\"] = fin_model\n",
    "filename = \"submission_9.csv\"\n",
    "pd.DataFrame({\"Id\": df_test.Id, \"SalePrice\": df_test.Prediction}).to_csv(filename, index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
